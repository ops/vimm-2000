
; Copyright © 2000 Pasi Ojala

  processor 6502


loader = $5f00
NEXTENDHI = $5fb3
NEXTPART = NEXTENDHI+1
SYSTEMSEL = NEXTPART+2
AUTO = SYSTEMSEL+1
COMMONIRQ = AUTO+1
copy = $5fc5



DYCPCOLORS = 1

; 8k memory expansion needed

;Note:	Video matrices are fully used
;	tech-tech 16(w)*2(h), DYCP 30(w)*16(h)

; $1000-1200	Video matrix
; $1200-1400	Tech-tech graphics 0		$20-$3f
; $1400-1600	DYCP data 1, columns  0-31, char codes $80-$bf (8-line, base $1000)
; $1600-1800	Tech-tech graphics 1		$60-$7f
; $1800-1a00	Video matrix 2 (for DYCP double buffer)
; $1a00-1c00	Tech-tech graphics 2		$a0-$bf
; $1c00-1e00	DYCP data 2, columns  0-31, char codes $80-$bf (8-line, base $1800)
; $1e00-2000	* Tech-tech graphics 3		$e0-$ff
; $2000-2200	* DYCP character font (32 9-line chars with 7 empty lines)
; $2200-2400	DYCP character font shifted >> 2
; $2400-2ff0	* tables, code
; * = data is initially there, other data is generated by the demo
; current end $2ff0, i.e. $3000..$3fff unused..

; Currently about ~20 lines free

NTSC	= 1
PAL	= 2

;SYSTEM	= NTSC	; 6560-101: 65 cycles per raster line, 261 lines
;SYSTEM	= PAL	; 6561-101: 71 cycles per raster line, 312 lines

#if SYSTEM & PAL
LINES = 312
CYCLES_PER_LINE = 71
SCRCENTER	EQU	34
RASTER	= 28
#else
LINES = 261
CYCLES_PER_LINE = 65
SCRCENTER	EQU	26
RASTER  = 24
#endif
TIMER_VALUE = LINES * CYCLES_PER_LINE - 2




XOFFSET	EQU	$340
CHARSET	EQU	$360


GFX0	EQU	$1200
GFX1	EQU	$1600
GFX2	EQU	$1a00
GFX3	EQU	$1e00

#mac samepage		; !!!CAN'T USE LOCAL SYMBOLS with this macro!!!
  if >. - >({1})
    echo "fatal: page boundary crossed at",{1},"- compilation aborted"
    err
  endif
#endm



; The BASIC line - Note: it is overwritten by the techtech data later

	.org $1201	; for the expanded Vic-20
basic	.word 0$	; link to next line
	.word 1997	; line number
	.byte $9E	; SYS token

; SYS digits

	.if (start) / 10000
	.byte $30 + (start) / 10000
	.endif
	.if (start) / 1000
	.byte $30 + (start) % 10000 / 1000
	.endif
	.if (start) / 100
	.byte $30 + (start) % 1000 / 100
	.endif
	.if (start) / 10
	.byte $30 + (start) % 100 / 10
	.endif
	.byte $30 + (start) % 10
0$	.byte 0,0,0	; end of BASIC program

	.org $1a00	; the "gendycpfont" routine is overwritten by techtech data
gendycpfont:
	ldx #0
0$	lda $2000,x
	lsr
	lsr
	sta $2200,x
	lda $2100,x
	lsr
	lsr
	sta $2300,x
	inx
	bne 0$
	rts

	.org $1c00	; the "gentech" routine is overwritten later (DYCP data)
gentech	; Generate 3 more versions of the tech-tech pic: ~266 lines (354 bytes)
	ldx #31
	clc
0$	lda GFX3+480,x	; 4/5
	rol		; 2
	sta GFX2+480,x	; 5
	lda GFX3+448,x	; = (11/12 * 16 + 5) * 32  * 3 = 6304 * 3 = 18912 = 266 lines
	rol
	sta GFX2+448,x
	lda GFX3+416,x
	rol
	sta GFX2+416,x
	lda GFX3+384,x
	rol
	sta GFX2+384,x
	lda GFX3+352,x
	rol
	sta GFX2+352,x
	lda GFX3+320,x
	rol
	sta GFX2+320,x
	lda GFX3+288,x
	rol
	sta GFX2+288,x
	lda GFX3+256,x
	rol
	sta GFX2+256,x
	lda GFX3+224,x
	rol
	sta GFX2+224,x
	lda GFX3+192,x
	rol
	sta GFX2+192,x
	lda GFX3+160,x
	rol
	sta GFX2+160,x
	lda GFX3+128,x
	rol
	sta GFX2+128,x
	lda GFX3+96,x
	rol
	sta GFX2+96,x
	lda GFX3+64,x
	rol
	sta GFX2+64,x
	lda GFX3+32,x
	rol
	sta GFX2+32,x
	lda GFX3+0,x
	rol
	sta GFX2+0,x
	dex
	bpl 0$

	ldx #31
	clc
1$	lda GFX2+480,x
	rol
	sta GFX1+480,x
	lda GFX2+448,x
	rol
	sta GFX1+448,x
	lda GFX2+416,x
	rol
	sta GFX1+416,x
	lda GFX2+384,x
	rol
	sta GFX1+384,x
	lda GFX2+352,x
	rol
	sta GFX1+352,x
	lda GFX2+320,x
	rol
	sta GFX1+320,x
	lda GFX2+288,x
	rol
	sta GFX1+288,x
	lda GFX2+256,x
	rol
	sta GFX1+256,x
	lda GFX2+224,x
	rol
	sta GFX1+224,x
	lda GFX2+192,x
	rol
	sta GFX1+192,x
	lda GFX2+160,x
	rol
	sta GFX1+160,x
	lda GFX2+128,x
	rol
	sta GFX1+128,x
	lda GFX2+96,x
	rol
	sta GFX1+96,x
	lda GFX2+64,x
	rol
	sta GFX1+64,x
	lda GFX2+32,x
	rol
	sta GFX1+32,x
	lda GFX2+0,x
	rol
	sta GFX1+0,x
	dex
	bpl 1$

	ldx #31
	clc
2$	lda GFX1+480,x
	rol
	sta GFX0+480,x
	lda GFX1+448,x
	rol
	sta GFX0+448,x
	lda GFX1+416,x
	rol
	sta GFX0+416,x
	lda GFX1+384,x
	rol
	sta GFX0+384,x
	lda GFX1+352,x
	rol
	sta GFX0+352,x
	lda GFX1+320,x
	rol
	sta GFX0+320,x
	lda GFX1+288,x
	rol
	sta GFX0+288,x
	lda GFX1+256,x
	rol
	sta GFX0+256,x
	lda GFX1+224,x
	rol
	sta GFX0+224,x
	lda GFX1+192,x
	rol
	sta GFX0+192,x
	lda GFX1+160,x
	rol
	sta GFX0+160,x
	lda GFX1+128,x
	rol
	sta GFX0+128,x
	lda GFX1+96,x
	rol
	sta GFX0+96,x
	lda GFX1+64,x
	rol
	sta GFX0+64,x
	lda GFX1+32,x
	rol
	sta GFX0+32,x
	lda GFX1+0,x
	rol
	sta GFX0+0,x
	dex
	bpl 2$
	rts

	.org $1e00
	incbin brush.data

	.org $2000
	incbin dycp.data


	.org $2400

	; BTW, align 0,16 CRASHES dasm!!!
	align 256,0

cosine
	; abs(half-cosine)
	dc.b $00,$02,$00,$06,$00,$0b,$00,$0f,$00,$14,$00,$18,$00,$1c,$00,$20
	dc.b $00,$25,$00,$29,$00,$2d,$00,$30,$00,$34,$00,$38,$00,$3b,$00,$3f
	dc.b $00,$42,$00,$45,$00,$48,$00,$4a,$00,$4d,$00,$4f,$00,$51,$00,$53
	dc.b $00,$55,$00,$56,$00,$58,$00,$59,$00,$5a,$00,$5a,$00,$5b,$00,$5b
	dc.b $00,$5b,$00,$5b,$00,$5a,$00,$5a,$00,$59,$00,$58,$00,$56,$00,$55
	dc.b $00,$53,$00,$51,$00,$4f,$00,$4d,$00,$4a,$00,$48,$00,$45,$00,$42
	dc.b $00,$3f,$00,$3b,$00,$38,$00,$34,$00,$30,$00,$2d,$00,$29,$00,$25
	dc.b $00,$20,$00,$1c,$00,$18,$00,$14,$00,$0f,$00,$0b,$00,$06,$00,$02
	dc.b $00,$02,$04,$06,$08,$0b,$0d,$0f,$11,$14,$16,$18,$1a,$1c,$1e,$20
	dc.b $23,$25,$27,$29,$2b,$2d,$2f,$30,$32,$34,$36,$38,$3a,$3b,$3d,$3f
	dc.b $40,$42,$43,$45,$46,$48,$49,$4a,$4c,$4d,$4e,$4f,$50,$51,$52,$53
	dc.b $54,$55,$56,$56,$57,$58,$58,$59,$59,$5a,$5a,$5a,$5b,$5b,$5b,$5b
	dc.b $5b,$5b,$5b,$5b,$5b,$5a,$5a,$5a,$59,$59,$58,$58,$57,$56,$56,$55
	dc.b $54,$53,$52,$51,$50,$4f,$4e,$4d,$4c,$4a,$49,$48,$46,$45,$43,$42
	dc.b $40,$3f,$3d,$3b,$3a,$38,$36,$34,$32,$30,$2f,$2d,$2b,$29,$27,$25
	dc.b $23,$20,$1e,$1c,$1a,$18,$16,$14,$11,$0f,$0d,$0b,$08,$06,$04,$02

#if SYSTEM & PAL
sinus78
	dc.b $77,$76,$75,$73,$72,$70,$6f,$6d,$6c,$6a,$69,$67,$66,$65,$63,$62
	dc.b $60,$5f,$5d,$5c,$5a,$59,$58,$56,$55,$53,$52,$51,$4f,$4e,$4c,$4b
	dc.b $4a,$48,$47,$46,$44,$43,$42,$40,$3f,$3e,$3d,$3b,$3a,$39,$38,$36
	dc.b $35,$34,$33,$31,$30,$2f,$2e,$2d,$2c,$2b,$29,$28,$27,$26,$25,$24
	dc.b $23,$22,$21,$20,$1f,$1e,$1d,$1c,$1b,$1a,$19,$18,$18,$17,$16,$15
	dc.b $14,$13,$13,$12,$11,$10,$10,$0f,$0e,$0d,$0d,$0c,$0b,$0b,$0a,$0a
	dc.b $09,$09,$08,$07,$07,$06,$06,$06,$05,$05,$04,$04,$04,$04,$03,$03
	dc.b $03,$03,$03,$02,$02,$02,$02,$02,$02,$01,$01,$01,$01,$01,$01,$01
	dc.b $01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$02,$03,$03
	dc.b $03,$03,$03,$04,$04,$04,$04,$05,$05,$06,$06,$06,$07,$07,$08,$09
	dc.b $09,$0a,$0a,$0b,$0b,$0c,$0d,$0d,$0e,$0f,$10,$10,$11,$12,$13,$13
	dc.b $14,$15,$16,$17,$18,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f,$20,$21,$22
	dc.b $23,$24,$25,$26,$27,$28,$29,$2b,$2c,$2d,$2e,$2f,$30,$31,$33,$34
	dc.b $35,$36,$38,$39,$3a,$3b,$3d,$3e,$3f,$40,$42,$43,$44,$46,$47,$48
	dc.b $4a,$4b,$4c,$4e,$4f,$51,$52,$53,$55,$56,$58,$59,$5a,$5c,$5d,$5f
	dc.b $60,$62,$63,$65,$66,$67,$69,$6a,$6c,$6d,$6f,$70,$72,$73,$75,$76
#else
sinus58
        dc.b $57,$56,$55,$54,$53,$52,$51,$50,$4f,$4e,$4d,$4c,$4b,$4a,$49,$48
        dc.b $47,$46,$45,$44,$42,$41,$40,$3f,$3e,$3d,$3c,$3b,$3a,$39,$38,$37
        dc.b $36,$35,$34,$33,$33,$32,$31,$30,$2f,$2e,$2d,$2c,$2b,$2a,$29,$28
        dc.b $27,$27,$26,$25,$24,$23,$22,$21,$21,$20,$1f,$1e,$1d,$1d,$1c,$1b
        dc.b $1a,$1a,$19,$18,$17,$17,$16,$15,$15,$14,$13,$13,$12,$11,$11,$10
        dc.b $10,$0f,$0e,$0e,$0d,$0d,$0c,$0c,$0b,$0b,$0a,$0a,$09,$09,$08,$08
        dc.b $08,$07,$07,$06,$06,$06,$05,$05,$05,$04,$04,$04,$04,$03,$03,$03
        dc.b $03,$02,$02,$02,$02,$02,$02,$02,$01,$01,$01,$01,$01,$01,$01,$01
        dc.b $01,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$02,$02
        dc.b $03,$03,$03,$03,$04,$04,$04,$04,$05,$05,$05,$06,$06,$06,$07,$07
        dc.b $08,$08,$08,$09,$09,$0a,$0a,$0b,$0b,$0c,$0c,$0d,$0d,$0e,$0e,$0f
        dc.b $10,$10,$11,$11,$12,$13,$13,$14,$15,$15,$16,$17,$17,$18,$19,$1a
        dc.b $1a,$1b,$1c,$1d,$1d,$1e,$1f,$20,$21,$21,$22,$23,$24,$25,$26,$27
        dc.b $27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f,$30,$31,$32,$33,$33,$34,$35
        dc.b $36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f,$40,$41,$42,$44,$45,$46
        dc.b $47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56

#endif

; Color bar appearance changes depending on scanline..!

border	; at least 32 + 12 (has 36+12)
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8		;12
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8		;12
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8		;12
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8		;12

back	; at least 32 + 18 (has 36+18)
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8

COL1	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
	samepage COL1
COL2	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
	dc.b 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
	samepage COL2

start
	jsr gendycpfont	; the routine is overwritten by gentech
	jsr gentech	; the routine is overwritten later
	lda #$2c
	sta start+1	; jsr gentech -> bit gentech (just in case)
	jsr dycpinit
	jsr dycpplot
	jsr ghostinit

	ldx #15
3$	txa
	asl
	ora #$20
	sta $1000,x	; video matrix
	ora #1
	sta $1000+16,x
	lda #0
	sta $9400,x	; color memory
	sta $9400+16,x	; color memory
	dex
	bpl 3$

	jsr calctech

	lda #0
	sta fadein+1

	sei
	lda #$7f
	sta $912e	; disable and acknowledge interrupts
	sta $912d
	sta $911e	; disable NMIs (Restore key)

;synchronize with the screen
	; If the timer is running, wait for it to finish..
;	lda $912b
;	and #$40
;	beq sync
	lda #$00	; disable Timer A free run
	sta $912b
;	ldx #RASTER+1	; wait for this raster line (times 2)
;wait$	cpx $9004
;	bne wait$


sync	ldx #RASTER	; wait for this raster line (times 2)
0$	cpx $9004
	bne 0$		; at this stage, the inaccuracy is 7 clock cycles
			; the processor is in this place 2 to 9 cycles
			; after $9004 has changed
	ldy #9
	bit $24
1$	ldx $9004
	txa
	bit $24
#if SYSTEM & PAL
	ldx #24
#else
	bit $24
	ldx #21
#endif
	dex
	bne *-1		; first spend some time (so that the whole
	cmp $9004	; loop will be 2 raster lines)
	bcs *+2		; save one cycle if $9004 changed too late
	dey
	bne 1$
	; now it is fully synchronized
	; 6 cycles have passed since last $9004 change
	; and we are on line 2(28+9)=74

;initialize the timers
timers:
	lda #$40	; enable Timer A free run on irq-VIA
	sta $912b

	lda #<TIMER_VALUE
	ldx #>TIMER_VALUE
	sta $9126
	stx $9125	; start the IRQ timer A
			; 6560-101: xx cycles from $9004 change
			; 6561-101: yy cycles from $9004 change
pointers:
	lda #<irq	; set the raster IRQ routine pointer
	sta $314
	lda #>irq
	sta $315
	lda #$c0
	sta $912e	; enable Timer A underflow interrupts

	;lda #$82
	;sta $911e	; enable Restore key
	cli

	jmp waiting

irq:
; irq (event)	; > 7 + at least 2 cycles of last instruction (9 to 16 total)
; pha		; 3
; txa		; 2
; pha		; 3
; tya		; 2
; pha		; 3
; tsx		; 2
; lda $0104,x	; 4
; and #xx	; 2
; beq 		; 3
; jmp ($314)	; 5
		; ---
		; 38 to 45 cycles delay at this stage

	lda #<(TIMER_VALUE-46+2)	; 2 for reload time
	sec
	sbc $9124	; 46 to 53 cycles delay at this stage
			; 90..83/23..16 in $9124 for PAL/NTSC
	; A = 0..7	0=wait 7 cycles .. 7=wait 0 cycles
	sta *+4
	bne *+2
	nop
	lda #$a9
	lda #$a9
	lda #$a9
	bit $ea
	; now we are synchronized 18 cycles from the IRQ

#if SYSTEM & PAL
	lda #8
	sta $900f
	;nop
	;nop
	;nop

	nop
	nop
#else
	nop
	lda #8
	sta $900f
	;nop
	;nop
	;nop

	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
#endif

	nop
	nop
	nop
	clc
	lda #RASTER+10	; 'Normal' y-position (active next frame..)
	sta $9001

	lda #2*25+1
	sta $9003	; 16x8 chars (25 rows)
	lda #16
	sta $9002	; 16 columns

	ldy #31		; perform amazing video effect
eloop:
#if SYSTEM & PAL
	lda XOFFSET,y
	adc #8
	tax
	lda CHARSET,y
#else
	ldx XOFFSET,y
	inx
	lda CHARSET,y
	ora #$cc
#endif
	stx $9000
	sta $9005
boptr	ldx border,y
	stx $900f	; middle -30 cycles (1 cycle inside the left border)
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
bgptr	lda back,y
	sta $900f	; store at middle-4 cycles
	clc
	dey
	stx $900f	; store at middle+4 cycles
#if SYSTEM & PAL
	nop
	nop
	nop
#endif
	bpl eloop	; end of amazing video effect

	bit $ea
	ldy #0
	sty $9002	; Note: even if columns==0, rows are counted!

	; one black line
	nop
	nop
	ldx #8
	stx $900f
	bit $ea
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

	nop
	nop
	nop
	nop
	nop
	nop
#if SYSTEM & PAL
	nop
	nop
	nop
	nop
	nop
	nop
#else
	lda #2*25+0
	sta $9003	; 8x8 chars (25 rows)
#endif

	nop
	nop
	nop
	nop
#if SYSTEM & PAL
	ldy #22		; 23 lines
#else
	ldy #6		; 7 lines
#endif
cloop:
boptr0	lda COL1,y
	sta $900f	; middle -30 cycles (1 cycle inside the left border)
	nop
boptr1	lda COL2,y
	sta $900f
boptr2	lda COL1,y
	sta $900f
boptr3	lda COL2,y
	sta $900f	; store at middle-4 cycles
boptr4	lda COL1,y
	sta $900f	; store at middle+4 cycles
boptr5	lda COL2,y
	sta $900f
boptr6	lda COL1,y
	sta $900f
#if SYSTEM & PAL
	nop
	nop
	nop
#endif
	dey
	bmi videosel
	jmp cloop	; end of amazing video effect


videosel:
	ldx #$cc	; $cc = base $1000, charset $1000, $ee = base $1800, charset $1800

	lda #8
	sta $900f
dycppos	lda #SCRCENTER-DYCPW	; centered
#if SYSTEM & PAL
	ldy #38		; 2 + 1 + 16	rows
#else
	ldy #30		; 2 + 1 + 12	rows
#endif
	sta $9000
	stx $9005
	sty $9003	; 8x8 chars

	ldy #DYCPW	; e.g. 30
	sty $9002

	jsr calctech	; + newcol
	jsr dycpscroll
	jsr dycpplot

#if DYCPCOLORS
	lda dcoff+1
	clc
	adc #1
	and #63
	ora #<dycpcolors
	sta dcoff+1
#endif
fadein	ldx #0
	bmi 0$
	cpx #54
	bcs 1$		;54..128 -> jump
	cpx #48
	bcs 2$		;48..53 -> jump

	lda borderb,x
	sta border,x	;borderb	; 4*12 = 48
	lda COL1B,x
	sta COL1,x	;COL1B		; 3*16 = 48
	lda COL2B,x
	sta COL2,x	;COL2B		; 3*16 = 48

2$	lda backb,x
	sta back,x	;backb		; 3*18 = 54

1$	inc fadein+1

0$
fadeout	ldx #255
	bmi 0$
	cpx #54
	bcc 1$		;54..128 -> jump

	lda #1
	sta KEYWAIT+1
	beq 0$

1$	cpx #48
	bcs 2$		;48..53 -> jump
	lda #8
	sta border,x	;borderb	; 4*12 = 48
	sta COL1,x	;COL1B		; 3*16 = 48
	sta COL2,x	;COL2B		; 3*16 = 48

#if DYCPCOLORS
	lda #0
	sta dycpcolors,x
	sta dycpcolors+48,x
	lda #8
#endif

2$	sta back,x	;backb		; 3*18 = 54
	inc fadeout+1
0$

;	lda #8+6	; it is blue now
;	sta $900f

	lda KEYWAIT+1	; next part loaded?
	bne 90$
	; Check keyboard	run/stop lshift x v n , / up/down
	lda $9121
	lsr
	bcs 90$
	; run/stop
	ldx fadeout+1
	bpl 90$
	ldx #0
	stx fadeout+1
90$
	lda loader
	cmp #$8e
	bne 100$
	jmp COMMONIRQ
100$	;jmp $eb18	; return from IRQ
	pla
	tay
	pla
	tax
	pla
	rti
	;jmp $eabf	; return to normal IRQ


calctech:
	ldx #0
	inc calctech+1

	ldy #31
0$	lda cosine,x
	lsr
	lsr
	sta XOFFSET,y
	lda cosine,x
	and #3		;and #2 !!ACTUALLY TWO CHARSETS (2-pixel res) IS QUITE ENOUGH
#if SYSTEM & PAL
	ora #$cc	; NTSC does this in the raster effect
#endif
	sta CHARSET,y
	inx
	dey
	bpl 0$
newcol:	ldx #0
	inx
	cpx #12
	bcc 0$
	ldx #0
	clc
0$:	stx newcol+1
	txa
	adc #<border
	sta boptr+1
newcol2:
	ldx #17
	dex
	bpl 0$
	ldx #17
0$:	stx newcol2+1
	txa
	clc
	adc #<back
	sta bgptr+1

#if SYSTEM & PAL
new3	ldx #0
	lda sinus78,x
	and #15
	adc #<COL1
	sta boptr0+1

	txa
	adc #40
	tax
	lda sinus78,x
	and #15
	adc #<COL2
	sta boptr1+1	; 18 cycles

	txa
	adc #40
	tax
	lda sinus78,x
	and #15
	adc #<COL1
	sta boptr2+1

	txa
	adc #40
	tax
	lda sinus78,x
	and #15
	adc #<COL2
	sta boptr3+1

	txa
	adc #40
	tax
	lda sinus78,x
	and #15
	adc #<COL1
	sta boptr4+1

	txa
	adc #40
	tax
	lda sinus78,x
	and #15
	adc #<COL2
	sta boptr5+1

	txa
	adc #40
	tax
	lda sinus78,x
	and #15
	adc #<COL1
	sta boptr6+1
#else
new3	ldx #0
	lda sinus58,x
	and #15
	adc #<COL1
	sta boptr0+1
	sta boptr4+1

	txa
	adc #40
	tax
	lda sinus58,x
	and #15
	adc #<COL2
	sta boptr1+1	; 18 cycles
	sta boptr5+1

	txa
	adc #40
	tax
	lda sinus58,x
	and #15
	adc #<COL1
	sta boptr2+1
	sta boptr6+1

	txa
	adc #40
	tax
	lda sinus58,x
	and #15
	adc #<COL2
	sta boptr3+1
#endif

	inc new3+1
	rts


#if SYSTEM & PAL
DYCPW		EQU	30	; DYCP width (height = 16 chars) -> 32+30*16=512
#else
DYCPW		EQU	26	; Maximum NTSC width 25 + 1 (-> 32+26*16=448)
#endif
DYCPCHARS	EQU	$200	; LSB must be 0, 2*DYCPW entries
DYCPOFFSET	EQU	(DYCPCHARS+2*DYCPW)
DYCPPTR		EQU	(DYCPOFFSET+1)
MATRIX		EQU	$1020
DYCPZP		EQU	$9e
DDIFF		EQU	$8b
DSPEED		EQU	(DYCPPTR+1)

dycptable
	dc.b "            albert of pu\]^ presents      [[techdycp[[       "
	dc.b " i know that both of these effects are very traditional["
	dc.b " but as surprising as it is[ i have never used them in a demo before[ "
	dc.b " the techtech effect also needs a different implementation in vic\o[  "
	dc.b " note that the fonts in this dycp scroller are nine lines high[  "
	dc.b " the dycp uses double buffering with ring text buffer and needs"
	dc.b " no character set clearing step[      "
	dc.b " use joystick to control the dycp speed and angle[ "
	dc.b " use the fire button to stop the scroll[  "
	dc.b "        if you want to make comments on this demo["
	dc.b " my email address is albert_cs[tut[fi          "
	dc.b " the next part shows how to fake an oversized video matrix[[["
	dc.b " i] colors used in the plasma                              "
	dc.b 0

dycpinit:
	ldx #DYCPW-1
	lda #0
	sta DYCPOFFSET
0$	sta DYCPCHARS,x
	dex
	bpl 0$

	lda #SCRCENTER-DYCPW+1		; centered
	sta dycppos+1

	ldx #4*DYCPW-1
1$	lda #$bf		; max 31 columns - the last codes left free
	sta MATRIX,x
	sta MATRIX+4*DYCPW,x
	sta MATRIX+8*DYCPW,x
	sta MATRIX+$800,x
	sta MATRIX+$800+4*DYCPW,x
	sta MATRIX+$800+8*DYCPW,x
#if SYSTEM & PAL
	sta MATRIX+12*DYCPW,x
	sta MATRIX+$800+12*DYCPW,x
#endif
	lda #1
	sta $9420,x
	sta $9420+4*DYCPW,x
	sta $9420+8*DYCPW,x
#if SYSTEM & NTSC
	lda #0	; mask the screen-horizontally-at-0-fetch-another-line -bug
#endif
	sta $9420+12*DYCPW,x
	dex
	bpl 1$

	jsr setdycp1

	ldx #0
	txa
9$	sta $1400,x
	sta $1500,x
	sta $1c00,x
	sta $1d00,x
	dex
	bne 9$

	lda #8
	sta DDIFF
	lda #4
	sta DSPEED

dycpinittext:
	lda #<dycptable
	sta dycptext+1
	lda #>dycptable
	sta dycptext+2
	rts

dycpscroll:
	lda #$7f
	sta $9122	; DDR for port B
	lda $9120	; VIA#2 port B
	bmi 0$
	dec DSPEED
0$	lda #$ff
	sta $9122	; Restore DDR

	lda $9111	; VIA#1 port A
	tay
	and #4
	bne 1$
	inc DDIFF
1$	tya
	and #8
	bne 2$
	dec DDIFF
2$	tya
	and #16
	bne 3$
	inc DSPEED
3$	tya
	and #$20	; fire ?
	bne 4$
	rts
	;
4$	lda #$21
	cmp dycpsel+1
	bne 6$
	lda #$1f
	sta dycpsel+1
	rts

6$	sta dycpsel+1
	ldx dycppos+1
	dex
	stx dycppos+1
	cpx #SCRCENTER-DYCPW-1
	beq 5$
	rts
	;
5$	ldx #SCRCENTER-DYCPW+1
	stx dycppos+1
	;
	lda DYCPOFFSET
	clc
	adc DDIFF
	sta DYCPOFFSET
	;
dycptext:
	lda $aaaa
	inc dycptext+1
	bne 0$
	inc dycptext+2
0$	cmp #0
	bne 2$
	jsr dycpinittext

	lda KEYWAIT+1
	bne noauto$
	lda AUTO
	beq noauto$
	lda #0
	sta fadeout+1
noauto$

	lda #0
2$	and #31
	;
	ldy dycpptr0+1
	sta DYCPCHARS,y		; ring buffer with a tail..
	sta DYCPCHARS+DYCPW,y	; some call it delta buffer
	iny
	cpy #DYCPW
	bne 22$
	ldy #0
22$	sty dycpptr0+1
	sty dycpptr1+1
	rts

	; videosel+1:	$ee/$cc
	; dycpplot+1:	$14/$1c
	; dycpmtrx+1:	0/8
dycpplot:		; Plot position $1400/$1c00
	lda #$14	; $14/$1c
	sta plttrg+2
	ldx #0
	stx plttrg+1
	ldx #DYCPW-1
	lda #$bf		; max 31 columns - the last codes left free
	ldy dycpmtrx+1
	bne 2$

1$	sta MATRIX,x
	sta MATRIX+1*DYCPW,x
	sta MATRIX+2*DYCPW,x
	sta MATRIX+3*DYCPW,x
	sta MATRIX+4*DYCPW,x
	sta MATRIX+5*DYCPW,x
	sta MATRIX+6*DYCPW,x
	sta MATRIX+7*DYCPW,x
	sta MATRIX+8*DYCPW,x
	sta MATRIX+9*DYCPW,x
	sta MATRIX+10*DYCPW,x
	sta MATRIX+11*DYCPW,x
#if SYSTEM & PAL
	sta MATRIX+12*DYCPW,x
	sta MATRIX+13*DYCPW,x
	sta MATRIX+14*DYCPW,x
	sta MATRIX+15*DYCPW,x
#endif
	dex
	bpl 1$
	bmi dycpcont

2$	sta MATRIX+$800,x
	sta MATRIX+$800+1*DYCPW,x
	sta MATRIX+$800+2*DYCPW,x
	sta MATRIX+$800+3*DYCPW,x
	sta MATRIX+$800+4*DYCPW,x
	sta MATRIX+$800+5*DYCPW,x
	sta MATRIX+$800+6*DYCPW,x
	sta MATRIX+$800+7*DYCPW,x
	sta MATRIX+$800+8*DYCPW,x
	sta MATRIX+$800+9*DYCPW,x
	sta MATRIX+$800+10*DYCPW,x
	sta MATRIX+$800+11*DYCPW,x
#if SYSTEM & PAL
	sta MATRIX+$800+12*DYCPW,x
	sta MATRIX+$800+13*DYCPW,x
	sta MATRIX+$800+14*DYCPW,x
	sta MATRIX+$800+15*DYCPW,x
#endif
	dex
	bpl 2$
	;bmi dycpcont

dycpcont
	ldx #0
	ldy DYCPOFFSET

dycploop
	sty dycpcnt+1

dycpptr0
	lda DYCPCHARS,x	; skip spaces.. one plot 224 cycles -> even if this
	beq pltnext	; check would take 7 cycles we will still gain cycles
			; if there is at least one space on the line

#if SYSTEM & PAL
	lda sinus78,y
	and #7
	sta dycpsub+1
	lda sinus78,y
#else
	lda sinus58,y
	and #7
	sta dycpsub+1
	lda sinus58,y
#endif
	lsr
	lsr
	lsr
	tay		; Y is the character line..
	txa
	clc
	adc dycptablo,y
	sta DYCPZP
	lda dycptabhi,y
dycpmtrx:
	adc #0		; base $1000/$1800 == 0/8
	sta DYCPZP+1

	; Columns 0..31 -> char codes $80..$bf
	lda dycpmap,x
	ldy #0
	sta (DYCPZP),y
	ora #1
	ldy #DYCPW
	sta (DYCPZP),y

#if DYCPCOLORS
	lda DYCPZP+1	; $14/$15, $1c/$1d
	and #1
	ora #$94
	sta DYCPZP+1	; $94/$95
dcoff	lda dycpcolors,x
	;ldy #DYCPW
	sta (DYCPZP),y	; NOTE!! THE COLORS ARE NOT DOUBLE-BUFFERED !!
	ldy #0
	sta (DYCPZP),y	; 24 cycles/char = 10.1 lines
#endif


	; Plot source	$1c00-$1dff
dycpptr1
	ldy DYCPCHARS,x
	lda dycpsrclo,y
	sec
dycpsub	sbc #0		; 0..7
	; carry clear if borrow
	sta pltsrc+1	; low byte
	lda dycpsrchi,y
dycpsel	adc #$1f	; $1f+C = $20 (unless borrow)
	sta pltsrc+2	; hi byte

	ldy #15
pltsrc	lda $aaaa,y
plttrg	sta $aaaa,y
	dey
	bpl pltsrc	; 224 cycles = 3.2 lines / char

pltnext	lda plttrg+1	; next 16 bytes to plot
	clc
	adc #16
	sta plttrg+1
	bcs dycppage	; next page

dycpcnt	lda #0
	adc DDIFF
	tay

	inx
	cpx #DYCPW
	bne dycploop

	lda DYCPOFFSET
	clc
	adc DSPEED
	sta DYCPOFFSET

	jsr ghostmove

	; Double buffer select
	lda dycpmtrx+1
	beq setdycp2
setdycp1
	lda #$ee
	sta videosel+1
	lda #$14
	sta dycpplot+1
	lda #0
	sta dycpmtrx+1
	rts
setdycp2
	lda #$cc
	sta videosel+1
	lda #$1c
	sta dycpplot+1
	lda #8
	sta dycpmtrx+1
	rts

dycppage
	inc plttrg+2
	clc
	bcc dycpcnt

;	0	1	4	7
;0	a			
;1	a	a		
;2	a	a		
;3	a	a		
;4	a	a	a	
;5	a	a	a	
;6	a	a	a	
;7	a	a	a	a
;8	a	a	a	a
;9		a	a	a
;a			a	a
;b			a	a
;c			a	a
;d				a
;e				a
;f				a

	align 32,0
dycpsrclo:
	dc.b 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240
	dc.b 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240
	align 32,0
dycpsrchi:
	dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dc.b 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	align 32,0
dycpmap:
	; Columns 0..31 -> char codes $80..$bf
	dc.b $80,$82,$84,$86,$88,$8a,$8c,$8e,$90,$92,$94,$96,$98,$9a,$9c,$9e
	dc.b $a0,$a2,$a4,$a6,$a8,$aa,$ac,$ae,$b0,$b2,$b4,$b6,$b8,$ba,$bc,$be

	align 16,0
dycptablo:
	dc.b <(MATRIX+0*DYCPW),<(MATRIX+1*DYCPW),<(MATRIX+2*DYCPW),<(MATRIX+3*DYCPW)
	dc.b <(MATRIX+4*DYCPW),<(MATRIX+5*DYCPW),<(MATRIX+6*DYCPW),<(MATRIX+7*DYCPW)
	dc.b <(MATRIX+8*DYCPW),<(MATRIX+9*DYCPW),<(MATRIX+10*DYCPW),<(MATRIX+11*DYCPW)
	dc.b <(MATRIX+12*DYCPW),<(MATRIX+13*DYCPW),<(MATRIX+14*DYCPW),<(MATRIX+15*DYCPW)

	align 16,0
dycptabhi:
	dc.b >(MATRIX+0*DYCPW),>(MATRIX+1*DYCPW),>(MATRIX+2*DYCPW),>(MATRIX+3*DYCPW)
	dc.b >(MATRIX+4*DYCPW),>(MATRIX+5*DYCPW),>(MATRIX+6*DYCPW),>(MATRIX+7*DYCPW)
	dc.b >(MATRIX+8*DYCPW),>(MATRIX+9*DYCPW),>(MATRIX+10*DYCPW),>(MATRIX+11*DYCPW)
	dc.b >(MATRIX+12*DYCPW),>(MATRIX+13*DYCPW),>(MATRIX+14*DYCPW),>(MATRIX+15*DYCPW)

#if DYCPCOLORS
	align 32,0
dycpcolors:
	dc.b 0,6,0,6,6,3,6,3, 3,1,3,1,1,3,1,3, 3,6,3,6,6,0,6,0, 0,0,0,2,2,4,2,4
	dc.b 4,5,4,5,5,3,5,3, 3,1,3,1,1,7,1,7, 7,5,7,5,5,4,5,4, 4,2,4,2,2,0,0,0

	dc.b 0,6,0,6,6,3,6,3, 3,1,3,1,1,3,1,3, 3,6,3,6,6,0,6,0, 0,0,0,2,2,4,2,4

;	dc.b  0, 6, 3, 1, 3, 6,  0, 2, 4, 5, 3, 1, 7, 5, 4, 2
;	dc.b  0, 2, 4, 7, 4, 2,  0, 2, 4, 5, 7, 1, 3, 5, 4, 2
#endif
borderb
	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
backb
	dc.b $08,$28,$88,$98,$88,$28,$08,$68,$48,$d8,$48,$68,$08,$28,$58,$f8,$58,$28	;18
	dc.b $08,$28,$88,$98,$88,$28,$08,$68,$48,$d8,$48,$68,$08,$28,$58,$f8,$58,$28	;18
	dc.b $08,$28,$88,$98,$88,$28,$08,$68,$48,$d8,$48,$68,$08,$28,$58,$f8,$58,$28	;18
COL1B
	dc.b $08, $2e,$4b,$89,$1b,$7e,$88,$4a,$2c,$4d,$7b,$19,$7f,$8d,$4c,$2a	;16
	dc.b $08, $2e,$4b,$89,$1b,$7e,$88,$4a,$2c,$4d,$7b,$19,$7f,$8d,$4c,$2a	;16
	dc.b $08, $2e,$4b,$89,$1b,$7e,$88,$4a,$2c,$4d,$7b,$19,$7f,$8d,$4c,$2a	;16
COL2B
	dc.b $08, $2a,$4c,$8d,$1f,$79,$8b,$4d,$2c,$4a,$78,$1a,$7c,$8f,$4c,$2a	;16
	dc.b $08, $2a,$4c,$8d,$1f,$79,$8b,$4d,$2c,$4a,$78,$1a,$7c,$8f,$4c,$2a	;16
	dc.b $08, $2a,$4c,$8d,$1f,$79,$8b,$4d,$2c,$4a,$78,$1a,$7c,$8f,$4c,$2a	;16


ghost:
	dc.b $3c,$7e,$ed,$c9,$ff,$ff,$ff,$d5, $00,$00,$00,$00,$00,$00,$00,$00
	ds.b 7*16
	;dc.b $1e,$3f,$76,$64,$7f,$7f,$7f,$6a, $00,$00,$80,$80,$80,$80,$80,$80
	;dc.b $0f,$1f,$3b,$32,$3f,$3f,$3f,$35, $00,$80,$40,$40,$c0,$c0,$c0,$40
	;dc.b $07,$0f,$1d,$19,$1f,$1f,$1f,$1a, $80,$c0,$a0,$20,$e0,$e0,$e0,$a0
	;dc.b $03,$07,$0e,$0c,$0f,$0f,$0f,$0d, $c0,$e0,$d0,$90,$f0,$f0,$f0,$50
	;dc.b $01,$03,$07,$06,$07,$07,$07,$06, $e0,$f0,$68,$48,$f8,$f8,$f8,$a8
	;dc.b $00,$01,$03,$03,$03,$03,$03,$03, $f0,$f8,$b4,$24,$fc,$fc,$fc,$54
	;dc.b $00,$00,$01,$01,$01,$01,$01,$01, $78,$fc,$da,$92,$fe,$fe,$fe,$aa

ghosteyes:
	dc.b $ed,$c9,$00,$00
	ds.b 7*4

	dc.b $db,$c9,$00,$00
	ds.b 7*4

	dc.b $c9,$db,$00,$00
	ds.b 7*4

	dc.b $c9,$ed,$00,$00
	ds.b 7*4

ghosteyep:
	dc.b 0

ghostinit:
	ldx #0
0$	lda ghost+8,x
	sta ghost+24,x
	lda ghost+0,x
	lsr
	sta ghost+16,x
	ror ghost+24,x
	inx
	txa
	and #7
	bne 0$		; handle 8 lines
	txa
	clc
	adc #8		; 8+8=16
	tax
	cmp #$70
	bne 0$

	ldx #0
1$	lda ghosteyes+2,x
	sta ghosteyes+6,x
	lda ghosteyes+0,x
	lsr
	sta ghosteyes+4,x
	ror ghosteyes+6,x

	lda ghosteyes+3,x
	sta ghosteyes+7,x
	lda ghosteyes+1,x
	lsr
	sta ghosteyes+5,x
	ror ghosteyes+7,x
	txa
	clc
	adc #4
	tax
	and #31
	cmp #28
	bne 1$
	txa
	clc
	adc #4
	tax
	cmp #128
	bne 1$

	rts



ghostmap:
	dc.b 15,31,47,63, 79,95,111,127

ghostx:
	dc.b 0
ghosty:
	dc.b 5
ghostmvx:
	dc.b 1
ghostmvy:
	dc.b -1


ghostmove:
#if 1
98$	lda #0
	and #3
	bne 97$

	lda ghost+0*16+7
	eor #$7e
	sta ghost+0*16+7
	lda ghost+1*16+7
	eor #$3f
	sta ghost+1*16+7
	lda ghost+2*16+7
	eor #$1f
	sta ghost+2*16+7
	lda ghost+2*16+15
	eor #$80
	sta ghost+2*16+15

	lda ghost+3*16+7
	eor #$0f
	sta ghost+3*16+7
	lda ghost+3*16+15
	eor #$c0
	sta ghost+3*16+15

	lda ghost+4*16+7
	eor #$07
	sta ghost+4*16+7
	lda ghost+4*16+15
	eor #$e0
	sta ghost+4*16+15

	lda ghost+5*16+7
	eor #$03
	sta ghost+5*16+7
	lda ghost+5*16+15
	eor #$f0
	sta ghost+5*16+15

	lda ghost+6*16+7
	eor #$01
	sta ghost+6*16+7
	lda ghost+6*16+15
	eor #$f8
	sta ghost+6*16+15

	lda ghost+7*16+15
	eor #$fc
	sta ghost+7*16+15
	jmp 99$

97$	lda 98$+1
	and #7
	cmp #5
	bne 99$

	lda ghosteyep
	and #127
	tay
	ldx #0
96$
	lda ghosteyes+0,y
	sta ghost+0*16+2,x
	lda ghosteyes+1,y
	sta ghost+0*16+3,x
	lda ghosteyes+2,y
	sta ghost+0*16+10,x
	lda ghosteyes+3,y
	sta ghost+0*16+11,x

	tya
	clc
	adc #4
	tay
	txa
	clc
	adc #16
	tax
	bpl 96$
	sty ghosteyep

99$	inc 98$+1
#endif

	lda dycpmtrx+1
	bne m1$
	ldx #7
m0l$	sta $15e0,x
	sta $15e8,x
	dex
	bpl m0l$
	bmi m2$		; jump always
m1$	lda #0
	ldx #7
m1l$	sta $1de0,x
	sta $1de8,x
	dex
	bpl m1l$
m2$

	lda #SCRCENTER-DYCPW+1
	sec
	sbc dycppos+1
	asl
	asl	; one cycle == 4 pixels
	adc ghostx
	pha
	and #7
	tay
	ldx ghostmap,y		; *16+15
	stx src$+1

	ldy ghosty
	lda dycptablo,y
	sta DYCPZP
	lda dycptabhi,y
	clc
	adc dycpmtrx+1		; base $1000/$1800 == 0/8
	sta DYCPZP+1

	pla
	lsr
	lsr
	lsr
	tay

	lda (DYCPZP),y
	cmp #$bf
	bne a0$
	lda #$bc
	sta (DYCPZP),y
a0$		; TODO: update the first target(s)
	; base + A*8
	tax
	asl
	asl
	asl
	sta ld0$+1
	sta st0$+1
	txa
	lsr
	lsr
	lsr
	lsr
	lsr
	clc
	adc dycpmtrx+1
	ora #$10
	sta ld0$+2
	sta st0$+2

	iny
	lda (DYCPZP),y
	cmp #$bf
	bne a1$
	lda #$bd
	sta (DYCPZP),y
a1$		; TODO: update the second target(s)
	; base + A*8
	tax
	asl
	asl
	asl
	sta ld1$+1
	sta st1$+1
	txa
	lsr
	lsr
	lsr
	lsr
	lsr
	clc
	adc dycpmtrx+1
	ora #$10
	sta ld1$+2
	sta st1$+2

	lda DYCPZP+1	; $14/$15, $1c/$1d
	and #1
	ora #$94
	sta DYCPZP+1	; $94/$95
	lda #5
	sta (DYCPZP),y
	dey
	sta (DYCPZP),y
plot$

src$	ldx #0
	ldy #7
3$	lda ghost-8,x
ld0$	ora $15e0,y
st0$	sta $15e0,y
	lda ghost-0,x
ld1$	ora $15e0,y
st1$	sta $15e8,y
	dex
	dey
	bpl 3$

move$	lda ghostmvx
	beq moveok$
	bmi left$
	; 0 -- move right
	inc ghostx
	lda #DYCPW*8-15
	cmp ghostx
	bne moveok$
	jsr ghmvy
	lda #255
	sta ghostmvx
	bne moveok$

left$	dec ghostx
	bne moveok$
	jsr ghmvy
	lda #1
	sta ghostmvx
	bne moveok$
moveok$
	rts

ghmvy	lda ghostmvy
	beq 11$
	bpl down$
	dec ghosty
	lda #1
	cmp ghosty
	bne 10$
	lda #1
	sta ghostmvy
10$	rts
down$	inc ghosty
#if SYSTEM & PAL
	lda #11
#else
	lda #9
#endif
	cmp ghosty
	bne 11$
	lda #255
	sta ghostmvy
11$	rts

waiting
	lda #255
	sta KEYWAIT+1

	lda loader
1$	cmp #$8e	; stx
	bne 1$		; don't use loader...

	lda #<nextpart
	sta NEXTPART+0
	lda #>nextpart
	sta NEXTPART+1

	ldx #<nextFile
	ldy #>nextFile
	jsr loader

2$	bcs 2$

	lda #0
	sta KEYWAIT+1

KEYWAIT	lda #0
	beq KEYWAIT

	lda #0
	sta $900f	; black border
	sta $9002	; 0 columns
	sta $9003	; 0 rows

	sei
	lda #<COMMONIRQ	; set the raster IRQ routine pointer
	sta $314
	lda #>COMMONIRQ
	sta $315
	cli
	jmp copy

nextFile
#if SYSTEM & PAL
	dc.b "PLASMA.P"
#else
	dc.b "PLASMA.N"
#endif



nextpart:

