
; Copyright © 2000 Pasi Ojala
; Albert of Pu-239	http://www.cs.tut.fi/~albert/

	processor 6502
	seg code



loader = $5f00
NEXTENDHI = $5fb3
NEXTPART = NEXTENDHI+1
SYSTEMSEL = NEXTPART+2
AUTO = SYSTEMSEL+1
COMMONIRQ = AUTO+1
copy = $5fc5



; $000-$0ff	video matrix	9 16x8-char rows x 28 columns
; $200-$2ff	video matrix	(copy for color memory toggle)

; $1000-1300	picture - gfx
; $1300-2000	*picture - gfx
; $2000-2100	*picture - color mem 1
; $2100-2200	*picture - color mem 2
; $2200-2300	*picture - aux colors (from $2201)
; $2300-2400	*picture - back & border colors (from $2301)
; $2400-2700	*first part of picture gfx

; $2700-	*code
; * = data initially there, other data is generated by the demo


NTSC	= 1
PAL	= 2

;SYSTEM	= NTSC	; 6560-101: 65 cycles per raster line, 261 lines
;SYSTEM	= PAL	; 6561-101: 71 cycles per raster line, 312 lines

#if SYSTEM & PAL
LINES = 312
CYCLES_PER_LINE = 71
#else
LINES = 261
CYCLES_PER_LINE = 65
#endif
TIMER_VALUE = LINES * CYCLES_PER_LINE - 2


#mac samepage		; !!!CAN'T USE LOCAL SYMBOLS with this macro!!!
  if >. - >({1})
    echo "fatal: page boundary crossed at",{1},"- compilation aborted"
    err
  endif
#endm

#mac nextpage		; !!!CAN'T USE LOCAL SYMBOLS with this macro!!!
  if (>. - >({1})) - 1
    echo "fatal: page boundary not crossed at",{1},"- compilation aborted"
    err
  endif
#endm


#if SYSTEM & PAL
RASTER	= 28	; effect=screen at RASTER + 10 (+ 1)
#else
RASTER	= 14
#endif
COLUMNS = 25	; Note: only 25 supported
ROWS	= 10	; COLUMNS*ROWS = 250 < 256

; The BASIC line - Note: it is overwritten

	.org $1201	; for the expanded Vic-20
basic:
	.word 0$	; link to next line
	.word 1998	; line number
	.byte $9E	; SYS token

; SYS digits

	.if (start) / 10000
	.byte $30 + (start) / 10000
	.endif
	.if (start) / 1000
	.byte $30 + (start) % 10000 / 1000
	.endif
	.if (start) / 100
	.byte $30 + (start) % 1000 / 100
	.endif
	.if (start) / 10
	.byte $30 + (start) % 100 / 10
	.endif
	.byte $30 + (start) % 10
0$:	.byte 0,0,0	; end of BASIC program

	.org $120e
start:
	sei
	lda #$7f
	sta $912e	; disable and acknowledge interrupts
	sta $912d
	sta $911e	; disable NMIs (Restore key)

	; Set volume setting for the display routine
	lda $900e
	and #15
	sta volume+1

;synchronize with the screen
	; If the timer is running, wait for it to finish..
;	lda $912b
;	and #$40
;	beq sync
	lda #$00	; disable Timer A free run
	sta $912b
;	ldx #RASTER+1	; wait for this raster line (times 2)
;0$:	cpx $9004
;	bne 0$


sync:	ldx #RASTER	; wait for this raster line (times 2)
0$:	cpx $9004
	bne 0$		; at this stage, the inaccuracy is 7 clock cycles
			; the processor is in this place 2 to 9 cycles
			; after $9004 has changed
	ldy #9
	bit $24
1$:	ldx $9004
	txa
	bit $24
#if SYSTEM & PAL
	ldx #24
#else
	bit $24
	ldx #21
#endif
	dex
	bne *-1		; first spend some time (so that the whole
	cmp $9004	; loop will be 2 raster lines)
	bcs *+2		; save one cycle if $9004 changed too late
	dey
	bne 1$
	; now it is fully synchronized
	; 6 cycles have passed since last $9004 change
	; and we are on line 2(28+9)=74

;initialize the timers
	lda #$40	; enable Timer A free run on irq-VIA
	sta $912b

	lda #<TIMER_VALUE
	ldx #>TIMER_VALUE
	sta $9126
	stx $9125	; start the IRQ timer A
			; 6560-101: 24 cycles from $9004 change
			; 6561-101: 24 cycles from $9004 change
	lda #<irq	; set the raster IRQ routine pointer
	sta $314
	lda #>irq
	sta $315
	lda #$c0
	sta $912e	; enable Timer A underflow interrupts

	;lda #$82
	;sta $911e	; enable Restore key

	ldx #0
2$	lda $2000,x	; color mem 1
	sta $9600,x
	lda $2100,x	; color mem 2
	sta $9400,x
	txa
	sta $000,x
	sta $200,x
	dex
	bne 2$

	lda #RASTER+15
	sta $9001	; vertical centering
#if SYSTEM & PAL
CLPOS	lda #34-COLUMNS	; centered
#else
CLPOS	lda #26-COLUMNS	;27-COLUMNS
#endif
	sta $9000	; horizontal centering
	lda #COLUMNS
	sta $9002	; columns + 9th bit of video matrix/color memory
	lda #ROWS*2+1+2	; 8 rows & 16x8 chars	+ 1 extra row
	sta $9003
	lda #$8c	; video matrix at $0000, character mem at $1000
	sta $9005

	ldx #0
3$	lda $2400,x
	sta $1000,x
	lda $2500,x
	sta $1100,x
	dex
	bne 3$
	jmp continue


	org $12fe	; 'remove' loading address

	incbin "pic.vic"

	org $2700

	;align 256,0

	align 256,0
COL0
	dc.b $8,$e,$b,$9,$b,$e, $8,$a,$c,$d,$b,$9,$f,$d,$c,$a
	;     0  6  3  1  3  6   0  2  4  5  3  1  7  5  4  2
	dc.b $8,$a,$c,$f,$c,$a, $8,$a,$c,$d,$f,$9,$b,$d,$c,$a
	;     0  2  4  7  4  2   0  2  4  5  7  1  3  5  4  2
	; 32 + 32 for scrolling..
	dc.b $8,$e,$b,$9,$b,$e, $8,$a,$c,$d,$b,$9,$f,$d,$c,$a
	dc.b $8,$a,$c,$f,$c,$a, $8,$a,$c,$d,$f,$9,$b,$d,$c,$a
	samepage COL0
	;dc.b $8

COL1	dc.b $08,$2a,$4c,$3b,$7f,$19,$3b,$4c,$2a
	;dc.b $08	;9+1
	samepage COL1
COL2	dc.b $08,$2a,$2a,$4c,$5d,$3b,$7f,$19,$19,$7f,$3b,$5d,$4c,$2a,$2a, $08
	samepage COL2

VAL1	= COLUMNS
VAL2	= 128+COLUMNS

matrix:
	dc.b VAL2,VAL1,VAL1,VAL1,VAL1,VAL1,VAL1,VAL1
	dc.b VAL1,VAL2,VAL2,VAL2,VAL2,VAL2,VAL2,VAL2
	dc.b VAL2,VAL1,VAL1,VAL1,VAL1,VAL1,VAL1,VAL1
	dc.b VAL1,VAL2,VAL2,VAL2,VAL2,VAL2,VAL2,VAL2
	samepage matrix

irq:
; irq (event)	; > 7 + at least 2 cycles of last instruction (9 to 16 total)
; pha		; 3
; txa		; 2
; pha		; 3
; tya		; 2
; pha		; 3
; tsx		; 2
; lda $0104,x	; 4
; and #xx	; 2
; beq 		; 3
; jmp ($314)	; 5
		; ---
		; 38 to 45 cycles delay at this stage

	lda #<(TIMER_VALUE-46+2)	; 2 for reload time
	sec
	sbc $9124	; 46 to 53 cycles delay at this stage
			; 90..83/23..16 in $9124 for PAL/NTSC
	; A = 0..8	0=wait 10 cycles .. 8=wait 2 cycles
	sta *+4
irqjmp:	bne *+2		; +1 cycles for all but A = 0
	nop		; 0:11-1 = 10
	lda #$a9	; 1:9 2:8
	lda #$a9	; 3:7 4:6
	lda #$a9	; 5:5 6:4
	bit $ea		; 7:3 8:2
	; now we are synchronized 63 cycles from the IRQ
	samepage irqjmp

	jsr wait29
#if SYSTEM & PAL
	nop
	nop
	nop
	nop
	nop
#else
	jsr wait12
#endif
	ldx #8
looppi0
#if SYSTEM & PAL
	jsr wait29
#else
	jsr wait26
#endif
	ldy COL1,x
	sty $900f	; left edge
	dex
	bpl looppi0
	samepage looppi0

	lda #VAL2
	sta $9002	; columns + 9th bit of video matrix/color memory
#if SYSTEM & PAL
	jsr wait15
#else
	jsr wait12
#endif

	nop
	lda $2200+ROWS*16	; auxiliary
	ora volume+1
	sta $900e
	ldy $2300+ROWS*16	; background & border
colptr1	lda COL0
	sta $900f

	nop
	nop

	bit $ea
	sty $900f	; screen left edge

	bit $ea
	ldx #ROWS*16-1
effect			; 71 cycles / loop
	; screen left edge - 2 cycles in NTSC
	stx $ff
	txa
	and #31
	tay
	lda matrix,y	; switch color memory each 8 lines
	sta emtrx+1

colptr	lda COL0,y
	sta xcolor+1
	lda $2200,x
	ldy $2300,x
	nop
	nop
	nop
xcolor	ldx #0
#if SYSTEM & PAL
	stx $900f	; picture right edge in PAL
	; screen right edge - 4 cycles in PAL
	nop
#endif
	ldx $ff
volume	ora #0
	sta $900e
emtrx	lda #COLUMNS
	sta $9002	; columns + 9th bit of video matrix/color memory
	sty $900f	; picture left edge
	dex
	bne effect	; 3+2
	samepage effect

	dex
	stx $ff
	bit $ea

#if SYSTEM & PAL
	jsr wait13
#else
	jsr wait10
#endif
	ldx #0
	ldy #6
colptr2	lda COL0
#if SYSTEM & PAL
	sta $900f	; screen right edge	Color in A
#else
	stx $900f
#endif
	sty $9002	; columns + 9th bit of video matrix/color memory
	bit $ea

	; safely in the border are now (3 cycles?)
colbar	lda COL2,x
	sta $900f

#if SYSTEM & PAL
ALPOS	lda #47
#else
ALPOS	lda #37
#endif
	sta $9000	; horizontal centering

	;bit $ea
	;jsr wait23
#if SYSTEM & PAL
	jsr wait25
#else
	jsr wait22
#endif
	inx
	cpx #16
	bne colbar
	samepage colbar

	ldx colptr+1
	inx
	txa
	and #31
	sta colptr+1
	sta colptr1+1
	sta colptr2+1

	; Set volume setting for the display routine
	lda $900e
	and #15
	sta volume+1

#if 0
	lda #$7f
	sta $9122	; DDR for port B
	lda $9120	; VIA#2 port B
	bmi *+5
	inc ALPOS+1	; Oikealle
	lda #$ff
	sta $9122	; Restore DDR

	lda $9111	; VIA#1 port A
	;tay
	;and #4
	;bne *+5
	;inc ALPOS+1	; Ylös
	;tya
	;and #8
	;bne *+5
	;dec ALPOS+1	; Alas
	;tya
	and #16
	bne *+5
	dec ALPOS+1	; Vasen
	;tya
	;and #$20	; fire ?
	;beq leave
leave
#endif

#if SYSTEM & PAL
BLPOS	lda #34-COLUMNS	; centered
#else
BLPOS	lda #26-COLUMNS	;27-COLUMNS
#endif
	sta $9000	; horizontal centering


	lda changepic+1
	beq 80$
	dec changepic+1
80$

	lda KEYWAIT+1	; next part loaded?
	bne 90$
	; Check keyboard	run/stop lshift x v n , / up/down
	lda $9121
	lsr
	bcs 90$
	; run/stop
;	ldx fadeout+1
;	bpl 90$
;	ldx #0
;	stx fadeout+1
	lda #1
	sta KEYWAIT+1
90$
	lda loader
	cmp #$8e
	bne 100$
	jmp COMMONIRQ
100$	;jmp $eb18	; return from IRQ
	pla
	tay
	pla
	tax
	pla
	rti
	;jmp $eabf	; return to normal IRQ



wait29	nop
	nop
	nop
wait26	nop
wait25	nop
	nop
wait23	nop
wait22	nop
	nop
	nop
	nop
	nop
wait17	nop
	nop
wait15	nop
	nop
wait13	nop
wait12	nop
	nop
wait10	nop
wait9	nop
	nop
	nop
	rts	; 6+6



continue:
	ldx #0
0$	lda $2600,x
	sta $1200,x
	dex
	bne 0$

	cli

	lda #255
	sta KEYWAIT+1

	lda loader
1$	cmp #$8e	; stx
	bne 1$		; don't use loader...

	; load pictures and show them
p0$	lda #<nextpart
	sta NEXTPART+0
	lda #>nextpart
	sta NEXTPART+1

	ldx #<gfxName
	ldy #>gfxName
	jsr loader
	bcs p1$

	lda #155
	sta changepic+1
	jsr changepic

	ldx gfxName+7
	inx
	cpx #":"
	bne p2$
	ldx #"A"
p2$	stx gfxName+7
	bne p0$
p1$

	ldx #<nextFile
	ldy #>nextFile
	jsr loader

2$	bcs 2$

	lda #150
	sta changepic+1
3$	lda changepic+1
	bne 3$

	lda #0
	sta KEYWAIT+1

	lda AUTO
	beq KEYWAIT
	inc KEYWAIT+1
KEYWAIT	lda #0
	beq KEYWAIT

	lda #0
	sta $900f	; black border
	sta $9002	; 0 columns
	sta $9003	; 0 rows

	sei
	lda #<COMMONIRQ	; set the raster IRQ routine pointer
	sta $314
	lda #>COMMONIRQ
	sta $315
	cli
	jmp copy

	align 256,0
player_dummy:
	rts


nextFile
#if SYSTEM & PAL
	dc.b "TECH^2.P"
#else
	dc.b "TECH^2.N"
#endif

gfxName
	dc.b "VIMMGFX0"


changepic:
	lda #0
	bne changepic		; wait ~5 seconds here

	lda nextpart+0
	cmp #112		; 'p'
	bne notcompressed$
	lda nextpart+1
	cmp #117		; 'u'
	bne notcompressed$

	lda NEXTENDHI
	sta src$+2
	sec
	sbc #>nextpart
	tay		; number of pages-1

	lda #>(nextpart+5120+512)	; 1 page safety area
	sta dst$+2

	ldx #0
src$	lda nextpart+1024,x
dst$	sta nextpart+5120+512,x
	inx
	bne src$
	dec src$+2
	dec dst$+2
	dey
	bpl src$

	ldx dst$+2
	inx
	ldy #<nextpart
	jsr decompress

	lda origstart+0
	cmp #$2e		; new music?
	bne notcompressed$
	jmp changemusic

notcompressed$
	lda #<($9600+25*0)
	sta colclr$+1
	lda #>($9600+25*0)
	sta colclr$+2

	ldx #160
clr$	inc changepic+1
3$	lda changepic+1	; wait for frame
	bne 3$

	sta $2200,x	; aux colors (from $2201)
	sta $2200-1,x
	sta $2200-2,x
	sta $2200-3,x
	sta $2300,x	; back & border colors (from $2301)
	sta $2300-1,x
	sta $2300-2,x
	sta $2300-3,x

	txa
	sec
	sbc #4
	tax
	and #7
	bne no$

	ldy #24
colclr$	sta $9600+25*0,y
	dey
	bpl colclr$

	lda colclr$+2
	eor #$02
	sta colclr$+2
	cmp #$96
	bne no$

	lda colclr$+1
	clc
	adc #25
	sta colclr$+1

no$	cpx #0
	bne clr$


	ldx #0
2$	lda nextpart+$1100,x
	sta $1000,x
	lda nextpart+$1200,x
	sta $1100,x
	lda nextpart+$1300,x
	sta $1200,x
	dex
	bne 2$

	lda #$13
	sta cpd$+2
	lda #>nextpart
	sta cps$+2
	ldy #13
	ldx #0
cps$	lda nextpart,x
cpd$	sta $1300,x
	inx
	bne cps$
	inc cps$+2
	inc cpd$+2
	dey
	bpl cps$


	inc changepic+1
5$	lda changepic+1	; wait for next frame change
	bne 5$

	ldx #0
set$	lda nextpart+$f00,x	; aux colors (from $2201)
	sta $2200,x
	lda nextpart+$1000,x	; back & border colors (from $2301)
	sta $2300,x
	lda nextpart+$e00,x
	sta $9400+25*0,x
	lda nextpart+$d00,x
	sta $9600+25*0,x
	inx
	bne set$

	rts


changemusic:

20$	lda #15		; fade speed (inverse of)
	sta changepic+1
21$	lda changepic+1	; wait for frame
	bne 21$

	lda $900e	; down volume..
	and #15
	sec
	sbc #1
	bmi 22$
	sta $900e
	sta volume+1
	jmp 20$
22$
player_init = $5403
player_update = $5400
MUSPTR = $5fbb
	; temporary routine
	lda #>player_dummy
	sta MUSPTR+2

	lda origstart+1
	sta 12$+2
	lda origstart+0
	sta 12$+1
	lda #<nextpart
	sta 11$+1
	lda #>nextpart
	sta 11$+2

	; tune size?	-- just copy 4 pages..
	ldy #3

	; copy tune
	ldx #0
11$	lda nextpart,x
12$	sta $582e,x
	inx
	bne 11$
	inc 11$+2
	inc 12$+2
	dey
	bpl 11$

	; init new tune
	jsr player_init		; player init sets volume.
	lda #7
	sta volume+1
	lda #>player_update
	sta MUSPTR+2

	rts


origstart:
	dc.b 0,0

#include "sa_uncrunch.asm"


nextpart:
	; This should be $3e00 tops to not overwrite the music. Currently at $2d17
	; ($5400-5120-512)

	.end

