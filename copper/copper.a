
; Copyright © 2000 Pasi Ojala

	processor 6502

loader = $5f00
NEXTENDHI = $5fb3
NEXTPART = NEXTENDHI+1
SYSTEMSEL = NEXTPART+2
AUTO = SYSTEMSEL+1
COMMONIRQ = AUTO+1
copy = $5fc5


nextpart = $4200


;  16k memory expansion needed

; $1000..1200	video matrix (overlay, scroll, logo/plotter)
; $1200..1400	plotter gfx (32 lines x 16 chars wide)
; $1400..149b	(screenstart) overlay double buffer
; $149b..1780	*code, sinus
; $1780..1800	*overlay, 16 chars
; $1800..2000	*chars for the scroll (inverted, 64x 16x8 chars)
; $2000..2f90	*code, colors, music

; $3200..3400	bob prerotated images
; $3400..4200	copper code (double buffered)
; * = data is initially there, other data is generated by the demo

;----------------------------------------------------------------------------

NTSC	= 1
PAL	= 2

;SYSTEM	= NTSC	; 6560-101: 65 cycles per raster line, 261 lines
;SYSTEM	= PAL	; 6561-101: 71 cycles per raster line, 312 lines

#if SYSTEM & PAL
LINES = 312
CYCLES_PER_LINE = 71
SCRCENTER = 34
#else
LINES = 261
CYCLES_PER_LINE = 65
SCRCENTER = 26
#endif
TIMER_VALUE = LINES * CYCLES_PER_LINE - 2



T0		EQU	$3400	; 16k expansion required and assumed.. ~$6c6
TC0		EQU	T0+4
T1		EQU	T0+$700	; lo-byte must be the same as T0
TC1		EQU	T1+4

SIZE3		EQU	18	; 'length' of the C3 table (C3 has 32 wrapped entries)
SIZE4		EQU	18	; 'length' of the C4 table (C4 has 32 wrapped entries)

ZPTABLE		EQU	$b8	; 32 bytes of Zero Page storage from this address.
ZPTMP5		EQU	$8b	; 5 Zero Page temporaries
; Note: $ea is used elsewhere (can't be changed), and must not overlap!!

COLORS1		= $334		; 16 entries
COLORS2		= $334+16	; 16 entries

#if SYSTEM & PAL
RASTER		= 28
SCW		= 31	; 30	(Note: 32 with scrolling messes up the video fetch)
CCW		= 15	; 14
XOFF		= 2	; 2  horizontal centering value for the contour characters

UWD		= 26
UHT		= 6
#else
RASTER		= 24
SCW		= 27	; 27 columns in the overlay
CCW		= 13	; 13 columns in the copper code
XOFF		= 0	; 2  horizontal centering value for the contour characters

UWD		= 24
UHT		= 5
#endif


screenstart	= 5*SCW		; copper lines + fixing area..
logostart	= screenstart+UHT*UWD

target		= $1200		; plotter gfx
bobimage	= $3200		; $3200..3300
bobimage2	= $3300		; $3300..3400



#mac samepage		; !!!CAN'T USE LOCAL SYMBOLS with this macro!!!
  if >. - >({1})
    echo "fatal: page boundary crossed at",{1},"- compilation aborted"
    err
  endif
#endm


	org $1201	; for the expanded Vic-20

; The BASIC line

basic:
	.word 0$	; link to next line
	.word 1997	; line number
	.byte $9E	; SYS token

; SYS digits

	.if (* + 8) / 10000
	.byte $30 + (* + 8) / 10000
	.endif
	.if (* + 7) / 1000
	.byte $30 + (* + 7) % 10000 / 1000
	.endif
	.if (* + 6) / 100
	.byte $30 + (* + 6) % 1000 / 100
	.endif
	.if (* + 5) / 10
	.byte $30 + (* + 5) % 100 / 10
	.endif
	.byte $30 + (* + 4) % 10
0$:	.byte 0,0,0	; end of BASIC program

	jmp start

MAKETEXT
	LDX #0
	LDA #<TC0
	STA $B0
	STA $B4
	LDA #>TC0
	STA $B1
	LDA #>TC1
	STA $B5
MLOOP	LDY #TEXTEND-TEXTCODE
MCOPY	LDA TEXTCODE,Y
	STA ($B0),Y
	STA ($B4),Y
	DEY
	BPL MCOPY
	TXA
	CLC
	ADC #ZPTABLE
	LDY #5
	STA ($B0),Y
	STA ($B4),Y
	LDA $B0
	CLC
	ADC #TEXTEND-TEXTCODE
	STA $B0
	STA $B4
	BCC MOW
	INC $B1
	INC $B5
MOW	INX
	CPX #32
	BNE MLOOP
	LDY #0

	lda #$a2	; ldx #
	sta ($b0),y
	sta ($b4),y
	iny
	lda #8		; 8
	sta ($b0),y
	sta ($b4),y
	iny

	lda #$8e	; stx abs
	sta ($b0),y
	sta ($b4),y
	iny
	lda #$0f	; lo
	sta ($b0),y
	sta ($b4),y
	iny
	lda #$90	; hi
	sta ($b0),y
	sta ($b4),y
	iny

	LDA #$60	; rts
	STA ($B0),Y
	STA ($B4),Y

	LDA #$24	; bit zp
	STA T0
	STA T0+2
	STA T1
	STA T1+2
	LDA #$EA	; nop
	STA T0+1
	STA T0+3
	STA T1+1
	STA T1+3
	LDX #31
	LDA #8
CL1	STA ZPTABLE,X
	DEX
	BPL CL1
	RTS

	; 58(59) visible cycles -> 66 cycles for colors (16 sta/x/y's)
TEXTCODE
	LDY #0
	LDA #0
	LDX ZPTABLE
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
	STX $900f
#if SYSTEM & PAL
	STX $900f
	STX $900f	; 71 cycles
#else
	NOP		; 65 cycles
#endif
TEXTEND

TZ	= TEXTEND-TEXTCODE

scratchinit:
	JSR INITSCROLL	; Init scroll text pointer
	JSR MAKETEXT	; Create Copper text code
	LDA #3
	STA SCROLL+1
	JSR SCROLL

	ldx #5*SCW
0$:	lda #240
	sta $1000-1,x	; video matrix
	lda #0
	sta $9400-1,x	; color memory
	dex
	bne 0$

	ldx #4*SCW
	lda #8		; black
10$	sta $9400-1,x	; color memory
	dex
	bne 10$

	lda $900e
	and #15		; black for now
	sta $900e

	ldx #UHT*UWD
	lda #0		; 'background' color
1$:	sta $9400+screenstart-1,x
	sta $1000+screenstart-1,x
	dex
	bne 1$

	ldx #15
2$:	lda #0
	sta COLORS1,x
	sta COLORS2,x

	txa
	asl
	ora #$20		; 16x8 char codes 32..	-> $1200
	sta $1000+logostart,x
	ora #1
	sta $1000+logostart+16,x
	lda #1
	sta $9400+logostart,x
	sta $9400+logostart+16,x
	dex
	bpl 2$

	ldx #0
	lda #0
4$	sta bobimage,x
	sta bobimage2,x
	dex
	bne 4$

	jsr screeninit


;------------------------------------------------------------
	sei
	lda #$7f
	sta $913e	; disable and acknowledge interrupts/NMIs
	sta $913d

; If the timer is running, wait for it to finish..
;	lda $912b
;	and #$40
;	beq sync
	lda #$00	; disable Timer A free run
	sta $912b
;	ldx #RASTER+1	; wait for this raster line (times 2)
;wait$:	cpx $9004
;	bne wait$

;synchronize with the screen
sync:	ldx #RASTER	; wait for this raster line (times 2)
0$:	cpx $9004
	bne 0$	; at this stage, the inaccuracy is 7 clock cycles
		; the processor is in this place 2 to 9 cycles
		; after $9004 has changed
	ldy #9
	bit $24
1$:	ldx $9004
	txa
	bit $24
#if SYSTEM & PAL
	ldx #24
#endif
#if SYSTEM & NTSC
	bit $24
	ldx #21
#endif
	dex
	bne *-1	; first spend some time (so that the whole
	cmp $9004	; loop will be 2 raster lines)
	bcs *+2	; save one cycle if $9004 changed too late
	dey
	bne 1$
	; now it is fully synchronized
	; 6 cycles have passed since last $9004 change
	; and we are on line 2(28+9)=74

;initialize the timers
timers:
	lda #$40	; enable Timer A free run on irq-VIA
	sta $912b

	lda #<TIMER_VALUE
	ldx #>TIMER_VALUE
	sta $9126

#if SYSTEM & PAL
	nop	; make a little delay to get the raster effect to the
	nop		; right place
#endif
	bit $ea

	stx $9125	; start the IRQ timer A
			; 6560-101: xx cycles from $9004 change
			; 6561-101: yy cycles from $9004 change
pointers:
	lda #<irq	; set the raster IRQ routine pointer
	sta $314
	lda #>irq
	sta $315
	lda #$c0
	sta $912e	; enable Timer A underflow interrupts

	;lda #$82
	;sta $911e	; enable Restore key
	rts



	; Leave space for the video matrix double buffering..

	org $1400 + screenstart

irq:	lda #<(TIMER_VALUE-46+2)	; 2 for reload time
	sec
	sbc $9124	; 46 to 53 cycles delay at this stage
			; 90..83/23..16 in $9124 for PAL/NTSC
	; A = 0..7	0=wait 7 cycles .. 7=wait 0 cycles
	lsr
	bcc *+2		; lose one cycle	0 2 4 6
	sta *+4
	bpl *+2
	samepage *+6		; lose 0, 2, 4 or 6 cycles
	nop
	nop
	nop
	; now we are synchronized 19 cycles from the IRQ

#if SYSTEM & NTSC
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

	bit $ea
#endif

	nop
	ldx #SCW	; SCW columns
	lda #RASTER+10	; 'Normal' y-position (active next frame..)
	sta $9001
	lda #46		; 23 lines, 8x8 chars
	sta $9003
vmtrx	lda #$cc	; charmem at $1000/$1400, chars at $1780 (charcode >240 (8x8 chars))
	sta $9005
xpos	lda #XOFF+3
	sta $9000
	stx $9002

TCALL	JSR T0
TTIM	bit $ea		; lda #$ea / bit $ea / nop ; nop / inc $ea

#if SYSTEM & PAL
	ldx #SCRCENTER-SCW	; Shift it to fit (and not bug)
	stx $9000
#else
	nop
	;ldx #$1a
	;stx $900f
	nop
	nop
	nop
#endif
	lda #SCW
	sec
	sbc columns+15	; Make it SCW-x chars wide
	sta $9002

	; If you add code between here and the next cmp $9004;bne *-3
	; remember to have it be a multiple of 7 cycles..

	lda $9004
	clc
	adc #4		; Wait 8 lines
	pha

	jsr SETCOL	; takes 6.03 lines -> almost 2 to spare
			; (constant time!)

	pla
	cmp $9004	; Wait until VIC-I has skipped those 8 chars
	bne *-3
	samepage *-5

#if SYSTEM & NTSC
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	ldx #SCRCENTER-UWD
	stx $9000
	;nop
	;nop
	;nop
#endif
	lda columns+15	; Make it x chars wide
	sta $9002

	lda $9004
	clc
	adc #3		; **Note** wait only <6 lines!!
	pha
	; If you add code between here and the next cmp $9004;bne *-3
	; remember to have it be a multiple of 7 cycles..

	jsr DOSINUS	; takes ~2.1 lines -> over 3 to spare
			; (constant time!)

#if SYSTEM & PAL
	ldx #SCRCENTER-UWD
	stx $9000
#else
	lda #$ce	; Preload charset/video matrix value
	sta $9005	; Switch charset
#endif
	nop
	nop

	pla
	cmp $9004	; Wait until VIC-I has skipped those chars
	bne *-3
	samepage *-5

#if SYSTEM & PAL
	bit $ea
	ldy #24
	dey
	bne *-1
	samepage *-3	; the delay loop must not cross page boundary..

	ldy #UHT*16-1
	lda #$ce	; Preload charset/video matrix value
	sta $9005	; Switch charset
	nop
	nop
#else
	ldy #30
	dey
	bne *-1
	samepage *-3	; the delay loop must not cross page boundary..

	;lda #$ce	; Preload charset/video matrix value
	;sta $9005	; Switch charset
	nop
	ldy #UHT*16-1
#endif
	ldx #15

	lda COLORS1,x
	sta $900f	; 1 cycle outside the screen's left edge
	lda #47		; set 16x8-switch and number of rows
	sta $9003
#if SYSTEM & PAL
	nop
#endif
	bit $ea
	jmp shnext

shloop:
	lda columns,x
	sta $9002
	lda COLORS1,x
	sta $900f	; 1 cycle outside the screen's left edge
#if SYSTEM & PAL
	nop
	nop
	nop
#endif
	nop
	nop
	nop
	nop
shnext:	nop
	dey
	lda COL3,x
	sta $900f	; 18 cycles from the video matrix left border
			; + ~4 cycles for border
	lda COL4,x
	sta $900f

	lda COLORS2,x	; 16 cycles between..
	sta $900f	; 18 cycles from the video matrix right border
			; + ~4 cycles for border

	tya
	bmi outloop
	samepage outloop	; actually this isn't so critical..

	and #15
	tax
	nop
	jmp shloop		; always 3 cycles..

outloop:
	ldx #0		; Mask the 'move screen horizontal bug'
	stx $9002
	ldx #$cc	; charmem at $1000, chars at $1200 (charcode >=32 (16x8 chars))
	ldy #2*UHT+17	; 2*(5+1+UHT+2) + 1
	stx $9005
	sty $9003

	LDA #8		; set color to black
	STA $900f

	lda #SCRCENTER-16	; centered
	sta $9000
	ldx #16			; width
	stx $9002

	JSR SCROLL	; ~0/20/20/17/16 lines
	jsr screen	; ~1.3 lines
	jsr newcolors	; 375 cycles = ~5.3 lines (constant time)

	jsr bobclear	; 2800 cycles = ~39.4 lines
	jsr dobob	; ~83 lines			(NTSC:44 lines)
	; ~145 lines + music IRQ

;	LDA #8+6	; it is blue now
;	STA $900f

	lda $900e
	and #15
111$	ldx #255
	cpx #16
	bcs 112$
	ora flash,x
112$	sta $900e
	dec 111$+1

	jmp irqend



images1:	; left sides
;	dc.b $01,$03,$07,$0f,$1f,$3f,$7f,$ff,$ff,$7f,$3f,$1f,$0f,$07,$03,$01
;	dc.b $e7,$f1,$31,$13,$16,$14,$34,$f7,$e0,$81,$a4,$a4,$a4,$a4,$bc,$98
	dc.b $03,$0f,$1f,$1f,$0f,$07,$02,$01,$fd,$fd,$fe,$fe,$7c,$7c,$38,$18	; &
;	dc.b $ff,$7f,$3f,$1f,$0f,$07,$03,$01,$01,$03,$07,$0f,$1f,$3f,$7f,$ff
	dc.b $1f,$3f,$7f,$70,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$7f,$7f,$3f,$1f	; C=
;	dc.b $01,$01,$03,$03,$07,$07,$0f,$0f,$1f,$1f,$3f,$3f,$7f,$7f,$ff,$ff
	dc.b $3c,$7e,$7e,$e7,$c3,$c3,$03,$07,$3e,$7e,$7c,$e0,$e0,$ff,$ff,$ff	; 20

images2:	; right sides
;	dc.b $80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80
;	dc.b $77,$15,$15,$35,$17,$11,$11,$77,$00,$ff,$00,$ff,$00,$7f,$00,$3f
	dc.b $c0,$f0,$f8,$f8,$f0,$e0,$40,$80,$bf,$bf,$7f,$7f,$3e,$3e,$1c,$18	; &
;	dc.b $ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff
	dc.b $c0,$e0,$e0,$3f,$3e,$3c,$38,$00,$38,$3c,$3e,$3f,$e0,$e0,$e0,$c0	; C=
;	dc.b $80,$80,$c0,$c0,$e0,$e0,$f0,$f0,$f8,$f8,$fc,$fc,$fe,$fe,$ff,$ff
	dc.b $1c,$3e,$3e,$77,$63,$63,$63,$63,$63,$63,$63,$63,$77,$3e,$3e,$1c	; 20

	; abcdefgh 01234567	0
	; 7abcdefg h0123456	1
	; 67abcdef gh012345	2
	; 567abcde fgh01234	3
	; 4567abcd efgh0123	4
	; 34567abc defgh012	5
	; 234567ab cdefgh01	6
	; 1234567a bcdefgh0	7

	; Prerotate images
updatebobline:	; x = line to update to    0..15/128..143
		; y = line to update from  0..15/16..31
	lda images2,y	; right side
	sta 2
	sta bobimage2+0,x
	lda images1,y	; left side
	; Note: Y not needed after this point.
	sta bobimage+0,x	;C abcdefgh 01234567
	cmp #$80		;a abcdefgh 01234567
	rol 2			;0 abcdefgh 1234567a
	rol			;a bcdefgh0 1234567a
	sta bobimage2+112,x
	tay
	lda 2
	sta bobimage+112,x	; there is no "sty abs,x"
	tya
	cmp #$80
	rol 2
	rol
	sta bobimage2+96,x
	tay
	lda 2
	sta bobimage+96,x
	tya
	cmp #$80
	rol 2
	rol
	sta bobimage2+80,x
	tay
	lda 2
	sta bobimage+80,x
	tya
	cmp #$80
	rol 2
	rol
	sta bobimage2+64,x
	tay
	lda 2
	sta bobimage+64,x
	tya
	cmp #$80
	rol 2
	rol
	sta bobimage2+48,x
	tay
	lda 2
	sta bobimage+48,x
	tya
	cmp #$80
	rol 2
	rol
	sta bobimage2+32,x
	tay
	lda 2
	sta bobimage+32,x
	tya
	cmp #$80
	rol 2
	rol
	sta bobimage2+16,x
	lda 2
	sta bobimage+16,x

	rts	;202+12=214 cycles

bobcmd:
	dc.b $01, $82, $03, $81, $02, $83, 0
bobc:	dc.b 0, 0, $ff

updatebob:
	ldx #0
	beq 10$
	dec updatebob+1
	rts
10$	lda bobc+2
	bmi 0$			; plot complete
	ldy bobc+1
	ldx bobc+0
	dec bobc+2
	dec bobc+1
	dec bobc+0
	jmp updatebobline	; 214 = ~3 lines

0$	ldx #0
	inc 0$+1
	lda bobcmd,x
	bne 2$
	sta 0$+1		; zero = reset command pointer
	rts
2$	tay
	and #15			; 15 different sources (0 excluded)
	asl
	asl
	asl
	asl
	sec
	sbc #1
	sta bobc+1		; source (15,31,..)

	tya
	and #$80		; 2 different targets
	ora #15
	sta bobc+0		; destination

	ldx #15
	stx bobc+2		; count
	lda #$ff
	sta updatebob+1		; negative = wait ~5 secs..
	rts			; ~73 cycles

dobob:
#if SYSTEM & PAL
	lda #4
#else
	lda #1
#endif
	sta bobindex+1
bobindex:
	ldx #0
ycount	lda #16
	clc
	adc bobadd,x
	asl		; twice as fast as x..
	tay
	lda sin70,y
	lsr		; $38
	lsr		; $1c
	adc #15+1	; add 15+1 and round up
;#if SYSTEM & PAL
	cmp #31
	bcc 0$
	lda #31
;#else
;	cmp #23
;	bcc 0$
;	lda #23
;#endif
0$	sta ycoord+1

xcount	lda #0
	clc
	adc bobadd,x
	tay		; sinus index
	lda sin70,y
	cmp #112
	bcc 1$
	lda #112
1$	tax

	; X = Target X-coordinate
bobplot:
	;txa		; both in A and X
	and #$f8	; X-coord MS-part * 8
	asl	; 16*
	asl	; 32*	; Height of the plotting area.
ycoord	ora #0		; Y-coordinate should be 15..31 (16 lines/object, 32 lines high area)
	tay
	lda #>target	; target MSB
	adc #0		; Select page == add carry (clears Carry)
	sta trg0+2	; update target MSB's
	sta trg1+2
	sta trg2+2
	sta trg3+2
	sta trg8+2
	sta trg9+2
	txa
	and #7
	tax

	lda m1tab,x	; Select mask
	sta mask1+1
	eor #$ff
	sta mask2+1

	lda imtab,x	; which pre-rotated image?
	ldx bobindex+1
	adc boboff,x	; Image offset - 0/128

	sta im1+1
	sta im2+1
#if <bobimage2
	adc #<bobimage2
#endif
	sta im9+1

	ldx #15
	; 146
loop1
im1	lda bobimage,x
mask1	and #255	; ff 7f 3f 1f 0f 07 03 01
trg0	eor target,y
trg1	sta target,y

im9	lda bobimage2,x
trg9	eor target+32,y
trg8	sta target+32,y

im2	lda bobimage,x
mask2	and #0		; 00 80 c0 e0 f0 f8 fc fe
trg2	eor target+64,y
trg3	sta target+64,y
	dey
	dex
	bpl loop1
	; 16*50 = 800 cycles = ~11 lines

	dec bobindex+1
	bmi 0$
	jmp bobindex	; (142+800+11)*6 = 953*6 = 5718 = ~81 lines
0$	inc xcount+1
	inc ycount+1
	jmp updatebob	; ~1.8 lines



	org $1780

	; 00 - background, 01 - border, 10 - character, 11 - aux

	; %11111111 -> %10111011
	; $80 -> $40

	; 16 chars needed
	; alaväli yläväli ylävaaka alavaaka
#if 0
	dc.b $00,$00,$00,$00,$00,$00,$00,$00
	dc.b $00,$00,$00,$00,$ff,$00,$00,$00
	dc.b $ff,$00,$00,$00,$00,$00,$00,$00
	dc.b $ff,$00,$00,$00,$ff,$00,$00,$00

	dc.b $80,$80,$80,$80,$00,$00,$00,$00
	dc.b $80,$80,$80,$80,$ff,$00,$00,$00
	dc.b $ff,$80,$80,$80,$00,$00,$00,$00
	dc.b $ff,$80,$80,$80,$ff,$00,$00,$00

	dc.b $00,$00,$00,$00,$80,$80,$80,$80
	dc.b $00,$00,$00,$00,$ff,$80,$80,$80
	dc.b $ff,$00,$00,$00,$80,$80,$80,$80
	dc.b $ff,$00,$00,$00,$ff,$80,$80,$80

	dc.b $80,$80,$80,$80,$80,$80,$80,$80
	dc.b $80,$80,$80,$80,$ff,$80,$80,$80
	dc.b $ff,$80,$80,$80,$80,$80,$80,$80
	dc.b $ff,$80,$80,$80,$ff,$80,$80,$80
#else
	dc.b $00,$00,$00,$00,$00,$00,$00,$00
	dc.b $00,$00,$00,$00,$ff,$00,$00,$00
	dc.b $ff,$00,$00,$00,$00,$00,$00,$00
	dc.b $ff,$00,$00,$00,$ff,$00,$00,$00

	dc.b $c0,$c0,$c0,$c0,$00,$00,$00,$00
	dc.b $c0,$c0,$c0,$c0,$ff,$00,$00,$00
	dc.b $ff,$c0,$c0,$c0,$00,$00,$00,$00
	dc.b $ff,$c0,$c0,$c0,$ff,$00,$00,$00

	dc.b $00,$00,$00,$00,$c0,$c0,$c0,$c0
	dc.b $00,$00,$00,$00,$ff,$c0,$c0,$c0
	dc.b $ff,$00,$00,$00,$c0,$c0,$c0,$c0
	dc.b $ff,$00,$00,$00,$ff,$c0,$c0,$c0

	dc.b $c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0
	dc.b $c0,$c0,$c0,$c0,$ff,$c0,$c0,$c0
	dc.b $ff,$c0,$c0,$c0,$c0,$c0,$c0,$c0
	dc.b $ff,$c0,$c0,$c0,$ff,$c0,$c0,$c0
#endif

	org $1800
	incbin chars.bin	; Character set, inverted, 16x8 chars

	align 256,0
sin70:
	dc.b $37,$36,$34,$33,$32,$30,$2f,$2e,$2c,$2b,$2a,$28,$27,$26,$24,$23
	dc.b $22,$21,$1f,$1e,$1d,$1c,$1a,$19,$18,$17,$16,$15,$14,$13,$12,$11
	dc.b $10,$0f,$0e,$0d,$0c,$0b,$0a,$0a,$09,$08,$07,$07,$06,$05,$05,$04
	dc.b $04,$03,$03,$02,$02,$02,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00
	dc.b $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$03,$03
	dc.b $04,$04,$05,$05,$06,$07,$07,$08,$09,$0a,$0a,$0b,$0c,$0d,$0e,$0f
	dc.b $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1c,$1d,$1e,$1f,$21
	dc.b $22,$23,$24,$26,$27,$28,$2a,$2b,$2c,$2e,$2f,$30,$32,$33,$34,$36
	dc.b $37,$38,$3a,$3b,$3c,$3e,$3f,$40,$42,$43,$44,$46,$47,$48,$4a,$4b
	dc.b $4c,$4d,$4f,$50,$51,$52,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d
	dc.b $5e,$5f,$60,$61,$62,$63,$64,$64,$65,$66,$67,$67,$68,$69,$69,$6a
	dc.b $6a,$6b,$6b,$6c,$6c,$6c,$6d,$6d,$6d,$6e,$6e,$6e,$6e,$6e,$6e,$6e
	dc.b $6f,$6e,$6e,$6e,$6e,$6e,$6e,$6e,$6d,$6d,$6d,$6c,$6c,$6c,$6b,$6b
	dc.b $6a,$6a,$69,$69,$68,$67,$67,$66,$65,$64,$64,$63,$62,$61,$60,$5f
	dc.b $5e,$5d,$5c,$5b,$5a,$59,$58,$57,$56,$55,$54,$52,$51,$50,$4f,$4d
	dc.b $4c,$4b,$4a,$48,$47,$46,$44,$43,$42,$40,$3f,$3e,$3c,$3b,$3a,$38

MERKIT				; Copper character font (one column/byte)
	dc.b $00,$00,$00,$00,$FE,$33,$FE,$FF,$DB,$76,$7E,$C3,$66,$FF,$C3,$7E
	dc.b $FF,$DB,$C3,$FF,$1B,$03,$7E,$C3,$D3,$76,$FF,$18,$FF,$FF,$60,$C0
	dc.b $7F,$FF,$38,$6C,$C6,$FF,$C0,$C0,$FF,$06,$0C,$06,$FF,$FF,$06,$0C
	dc.b $FF,$7E,$C3,$7E,$FF,$33,$1E,$1E,$13,$FF,$FF,$3B,$6B,$CE,$6E,$CB
	dc.b $DB,$72,$03,$FF,$03,$7F,$C0,$7F,$3F,$E0,$3F,$FF,$60,$30,$60,$FF
	dc.b $C3,$66,$3C,$66,$C3,$0F,$F8,$0F,$F3,$DB,$CF,$FF,$C3,$62,$E7,$1F
	dc.b $E7,$62,$C3,$FF,$02,$FF,$02,$10,$38,$10,$10,$00,$00,$DF,$07,$00
	dc.b $07,$66,$FF,$66,$FF,$66,$66,$CB,$72,$E2,$18,$47,$00,$07,$7E,$C3
	dc.b $C3,$7E,$1C,$3E,$1C,$18,$7E,$18,$E0,$18,$18,$18,$60,$E0,$3C,$07
	dc.b $7E,$C3,$7E,$02,$FF,$F2,$DB,$CE,$C3,$DB,$FF,$1F,$18,$FF,$CF,$DB
	dc.b $73,$7E,$CB,$79,$03,$FB,$1F,$7E,$DB,$7E,$8E,$DB,$7E,$6C,$EC,$18
	dc.b $3C,$66,$6C,$6C,$6C,$66,$3C,$18,$02,$DB,$E,$00,$00,$00,$00
	; start of char code n = end of char code n-1
	dc.b 0	; MERKIT+191
	dc.b $04,$07,$0A,$0D,$10,$13,$16,$1A,$1D,$1E,$21,$25,$28,$2D,$31,$34
	dc.b $37,$3A,$3E,$42,$45,$48,$4B,$50,$55,$58,$5B,$5D,$62,$64,$67,$6B
	dc.b $6D,$6E,$71,$76,$79,$7C,$7D,$7E,$80,$82,$85,$88,$89,$8C,$8D,$90
	dc.b $93,$95,$98,$9B,$9E,$A1,$A4,$A7,$AA,$AD,$AE,$AF,$B2,$B5,$B8,$BB

#if 0
C3	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	dc.b $08,$2a,$4c,$7f,$4c,$2a					; 6
	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	dc.b $08,$2a,$4c,$7f,$4c,$2a					; 6
	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	;dc.b $08,$2a,$4c,$7f,$4c,$2a					; 6
	samepage C3

C4	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	dc.b $08,$6e,$3b,$19,$3b,$6e					; 6
	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	dc.b $08,$6e,$3b,$19,$3b,$6e					; 6
	dc.b $08,$2a,$4c,$5d,$3b,$7f,$19,$7f,$3b,$5d,$4c,$2a		;12
	;dc.b $08,$6e,$3b,$19,$3b,$6e					; 6
	samepage C4
#else
C3	dc.b $08,$28,$48,$58,$38,$78,$18,$78,$38,$58,$48,$28		;12
	dc.b $08,$28,$48,$78,$48,$28					; 6
	dc.b $08,$28,$48,$58,$38,$78,$18,$78,$38,$58,$48,$28		;12
	dc.b $08,$28,$48,$78,$48,$28					; 6
	dc.b $08,$28,$48,$58,$38,$78,$18,$78,$38,$58,$48,$28		;12
	samepage C3

C4	dc.b $08,$28,$48,$58,$38,$78,$18,$78,$38,$58,$48,$28		;12
	dc.b $08,$68,$38,$18,$38,$68					; 6
	dc.b $08,$28,$48,$58,$38,$78,$18,$78,$38,$58,$48,$28		;12
	dc.b $08,$68,$38,$18,$38,$68					; 6
	dc.b $08,$28,$48,$58,$38,$78,$18,$78,$38,$58,$48,$28		;12
	samepage C4
#endif
	; The first column colors should be $08 to hide the last lines

COL3:	dc.b $08, $2a,$2c,$4f,$4c,$8a,$98,$7a,$1c,$1d,$7f,$99,$8b,$4d,$2c,$2a
	samepage COL3
COL4:	dc.b $08, $2a,$2c,$4d,$4f,$89,$9b,$7d,$1c,$1a,$78,$9e,$8b,$49,$2b,$2e
	samepage COL4

COL5:	dc.b $08,$0e,$0b,$09,$0b,$0e,$08,$0a,$0c,$0d,$0b,$09,$0f,$0d,$0c,$0a
	dc.b $08,$0e,$0b,$09,$0b,$0e,$08,$0a,$0c,$0d,$0b,$09,$0f,$0d,$0c,$0a
	samepage COL5
COL6:	dc.b $08,$0a,$0c,$0d,$0f,$09,$0b,$0d,$0c,$0a,$08,$0a,$0c,$0f,$0c,$0a
	dc.b $08,$0a,$0c,$0d,$0f,$09,$0b,$0d,$0c,$0a,$08,$0a,$0c,$0f,$0c
	samepage COL6
	dc.b $0a

columns
#if 0
	dc.b  UWD, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	dc.b   0	; shadow position
#else
	dc.b  UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD, UWD
	dc.b   UWD	; shadow position
#endif
	samepage columns

animtable:
	dc.b 96+0*6, 96+1*6, 96+2*6, 96+3*6

	align 64,0
SINUS	; No skips allowed in the sinus!!
	dc.b $19,$18,$17,$16,$15,$14,$13,$12
	dc.b $11,$10,$0f,$0e,$0d,$0c,$0b,$0a
	dc.b $09,$08,$07,$06,$05,$04,$03,$03
	dc.b $02,$02,$01,$01,$00,$00,$00,$00
	dc.b $00,$00,$00,$00,$01,$01,$02,$02
	dc.b $02,$03,$03,$04,$05,$06,$07,$08
	dc.b $09,$0a,$0b,$0c,$0d,$0e,$0f,$10
	dc.b $11,$12,$13,$14,$15,$16,$17,$18

TEKSTI	dc.b "                 ", 28, "  ", 128, "            C O P P E R     4  "
#if SYSTEM & PAL
	dc.b " "
#endif
	dc.b 128
	dc.b "-  THE  NEXT  GENERATION            "
	dc.b " JOY ", 128, " TO  ", 128, "STOP", 128
	dc.b "  IF YOU CAN READ THIS, CONSIDER HOW MUCH "
	dc.b "TIME IT TAKES TO SCROLL THE COLORS ! !      "
	dc.b "        ALL IDEAS AND CODE BY ALBERT  OF  PU-239..      "
	dc.b "          THIS  IS  QUITE  HARD  TO  READ  SO  "
	dc.b "WE  BETTER  CONTINUE  TO  THE  NEXT PART ..."
	dc.b "                   WRAP...        "
	dc.b 255

DOSINUS	LDA #0		;2	= 137 +6+6 = ~2.1 lines
	AND #$3F	;2
	inc DOSINUS+1	; 4
	TAY		;2
	LDA SINUS,Y	;4
	TAX		;2
	LDA #$08	;2
	STA ZPTABLE,X	;3
	STA ZPTABLE+6,X	;3
	LDA #$2a	;2
	STA ZPTABLE+1,X	;3
	STA ZPTABLE+5,X	;3
	LDA #$4c	;2
	STA ZPTABLE+2,X	;3
	STA ZPTABLE+4,X	;3
	LDA #$79	;2
	STA ZPTABLE+3,X	;3
			;49
	tya
	CLC
	ADC #10
	AND #$3F
	TAY
	LDA SINUS,Y
	TAX
	LDA #$08
	STA ZPTABLE,X
	STA ZPTABLE+6,X
	LDA #$6e
	STA ZPTABLE+1,X
	STA ZPTABLE+5,X
	LDA #$3b
	STA ZPTABLE+2,X
	STA ZPTABLE+4,X
	LDA #$19
	STA ZPTABLE+3,X

	tya
	CLC
	ADC #10
	AND #$3F
	TAY
	LDA SINUS,Y
	TAX
	LDA #$08
	STA ZPTABLE,X
	STA ZPTABLE+6,X
	LDA #$5d
	STA ZPTABLE+1,X
	STA ZPTABLE+5,X
	LDA #$3b
	STA ZPTABLE+2,X
	STA ZPTABLE+4,X
	LDA #$19
	STA ZPTABLE+3,X

	RTS


SETCOL	LDA #0		;2		416 +6+6 cycles (~6.03 lines)
	EOR #1		;2
	STA SETCOL+1	;4
	bne NEWCOL	;2/3	=11
	samepage NEWCOL
	JMP NEWCOL2	;3	=13
NEWCOL	LDX #0		;2
	nop
	LDA C3,X
	STA TC0+0*TZ+3
	STA TC1+0*TZ+3
	LDA C3+1,X
	STA TC0+1*TZ+3
	STA TC1+1*TZ+3
	LDA C3+2,X
	STA TC0+2*TZ+3
	STA TC1+2*TZ+3
	LDA C3+3,X
	STA TC0+3*TZ+3
	STA TC1+3*TZ+3
	LDA C3+4,X
	STA TC0+4*TZ+3
	STA TC1+4*TZ+3
	LDA C3+5,X
	STA TC0+5*TZ+3
	STA TC1+5*TZ+3
	LDA C3+6,X
	STA TC0+6*TZ+3
	STA TC1+6*TZ+3
	LDA C3+7,X
	STA TC0+7*TZ+3
	STA TC1+7*TZ+3
	LDA C3+8,X
	STA TC0+8*TZ+3
	STA TC1+8*TZ+3
	LDA C3+9,X
	STA TC0+9*TZ+3
	STA TC1+9*TZ+3
	LDA C3+10,X
	STA TC0+10*TZ+3
	STA TC1+10*TZ+3
	LDA C3+11,X
	STA TC0+11*TZ+3
	STA TC1+11*TZ+3
	LDA C3+12,X
	STA TC0+12*TZ+3
	STA TC1+12*TZ+3
	LDA C3+13,X
	STA TC0+13*TZ+3
	STA TC1+13*TZ+3
	LDA C3+14,X
	STA TC0+14*TZ+3
	STA TC1+14*TZ+3
	LDA C3+15,X
	STA TC0+15*TZ+3
	STA TC1+15*TZ+3
	LDA C3+16,X
	STA TC0+16*TZ+3
	STA TC1+16*TZ+3
	LDA C3+17,X
	STA TC0+17*TZ+3
	STA TC1+17*TZ+3

	LDA C3+18,X
	STA TC0+18*TZ+3
	STA TC1+18*TZ+3
	LDA C3+19,X
	STA TC0+19*TZ+3
	STA TC1+19*TZ+3
	LDA C3+20,X
	STA TC0+20*TZ+3
	STA TC1+20*TZ+3
	LDA C3+21,X
	STA TC0+21*TZ+3
	STA TC1+21*TZ+3
	LDA C3+22,X
	STA TC0+22*TZ+3
	STA TC1+22*TZ+3
	LDA C3+23,X
	STA TC0+23*TZ+3
	STA TC1+23*TZ+3
	LDA C3+24,X
	STA TC0+24*TZ+3
	STA TC1+24*TZ+3
	LDA C3+25,X
	STA TC0+25*TZ+3
	STA TC1+25*TZ+3
	LDA C3+26,X
	STA TC0+26*TZ+3
	STA TC1+26*TZ+3
	LDA C3+27,X
	STA TC0+27*TZ+3
	STA TC1+27*TZ+3
	LDA C3+28,X
	STA TC0+28*TZ+3
	STA TC1+28*TZ+3
	LDA C3+29,X
	STA TC0+29*TZ+3
	STA TC1+29*TZ+3
	LDA C3+30,X
	STA TC0+30*TZ+3
	STA TC1+30*TZ+3
	LDA C3+31,X
	STA TC0+31*TZ+3
	STA TC1+31*TZ+3	;32*12 = 384

	LDX NEWCOL+1	;4
	INX		;2
	CPX #SIZE3	;2
	beq c0reset
	samepage c0reset	;2/3
	bit $ea		;3	; Both branches take the same time..
	STX NEWCOL+1	;4
	rts		;6+6
c0reset:
	LDX #0		;2
	STX NEWCOL+1	;4
	rts		;6+6

NEWCOL2	LDX #0
	LDA C4,X
	STA TC0+0*TZ+1
	STA TC1+0*TZ+1
	LDA C4+1,X
	STA TC0+1*TZ+1
	STA TC1+1*TZ+1
	LDA C4+2,X
	STA TC0+2*TZ+1
	STA TC1+2*TZ+1
	LDA C4+3,X
	STA TC0+3*TZ+1
	STA TC1+3*TZ+1
	LDA C4+4,X
	STA TC0+4*TZ+1
	STA TC1+4*TZ+1
	LDA C4+5,X
	STA TC0+5*TZ+1
	STA TC1+5*TZ+1
	LDA C4+6,X
	STA TC0+6*TZ+1
	STA TC1+6*TZ+1
	LDA C4+7,X
	STA TC0+7*TZ+1
	STA TC1+7*TZ+1
	LDA C4+8,X
	STA TC0+8*TZ+1
	STA TC1+8*TZ+1
	LDA C4+9,X
	STA TC0+9*TZ+1
	STA TC1+9*TZ+1
	LDA C4+10,X
	STA TC0+10*TZ+1
	STA TC1+10*TZ+1
	LDA C4+11,X
	STA TC0+11*TZ+1
	STA TC1+11*TZ+1
	LDA C4+12,X
	STA TC0+12*TZ+1
	STA TC1+12*TZ+1
	LDA C4+13,X
	STA TC0+13*TZ+1
	STA TC1+13*TZ+1
	LDA C4+14,X
	STA TC0+14*TZ+1
	STA TC1+14*TZ+1
	LDA C4+15,X
	STA TC0+15*TZ+1
	STA TC1+15*TZ+1
	LDA C4+16,X
	STA TC0+16*TZ+1
	STA TC1+16*TZ+1
	LDA C4+17,X
	STA TC0+17*TZ+1
	STA TC1+17*TZ+1

	LDA C4+18,X
	STA TC0+18*TZ+1
	STA TC1+18*TZ+1
	LDA C4+19,X
	STA TC0+19*TZ+1
	STA TC1+19*TZ+1
	LDA C4+20,X
	STA TC0+20*TZ+1
	STA TC1+20*TZ+1
	LDA C4+21,X
	STA TC0+21*TZ+1
	STA TC1+21*TZ+1
	LDA C4+22,X
	STA TC0+22*TZ+1
	STA TC1+22*TZ+1
	LDA C4+23,X
	STA TC0+23*TZ+1
	STA TC1+23*TZ+1
	LDA C4+24,X
	STA TC0+24*TZ+1
	STA TC1+24*TZ+1
	LDA C4+25,X
	STA TC0+25*TZ+1
	STA TC1+25*TZ+1
	LDA C4+26,X
	STA TC0+26*TZ+1
	STA TC1+26*TZ+1
	LDA C4+27,X
	STA TC0+27*TZ+1
	STA TC1+27*TZ+1
	LDA C4+28,X
	STA TC0+28*TZ+1
	STA TC1+28*TZ+1
	LDA C4+29,X
	STA TC0+29*TZ+1
	STA TC1+29*TZ+1
	LDA C4+30,X
	STA TC0+30*TZ+1
	STA TC1+30*TZ+1
	LDA C4+31,X
	STA TC0+31*TZ+1
	STA TC1+31*TZ+1

	LDX NEWCOL2+1	;4
	DEX		;2
	CPX #0		;2
	bmi c1reset
	samepage c1reset	;2/3
	bit $ea		;3	; Both branches take the same time..
	STX NEWCOL2+1	;4
	rts
c1reset:
	LDX #SIZE4-1	;2
	STX NEWCOL2+1	;4
	rts



ts0:	lda TC1+6+1*3+0*TZ,x		; 8*(4+4*5) + 11 = 203 cycles/loop
	sta TC0+6+0*3+0*TZ,x		; -> 2842 cycles total = ~40 lines/3 frames
	sta TC0+6+0*3+1*TZ,x		; -> ~13 lines/frame (3/4 of frames)
	sta TC0+6+0*3+2*TZ,x	; Unrolling would save about 15*32=480 cycles (7 lines)
	sta TC0+6+0*3+3*TZ,x	; ("sta abs" is faster than "sta abs,x")
				; Unfortunately it would also take a lot of memory..
	lda TC1+6+1*3+4*TZ,x
	sta TC0+6+0*3+4*TZ,x
	sta TC0+6+0*3+5*TZ,x
	sta TC0+6+0*3+6*TZ,x
	sta TC0+6+0*3+7*TZ,x

	lda TC1+6+1*3+8*TZ,x
	sta TC0+6+0*3+8*TZ,x
	sta TC0+6+0*3+9*TZ,x
	sta TC0+6+0*3+10*TZ,x
	sta TC0+6+0*3+11*TZ,x

	lda TC1+6+1*3+12*TZ,x
	sta TC0+6+0*3+12*TZ,x
	sta TC0+6+0*3+13*TZ,x
	sta TC0+6+0*3+14*TZ,x
	sta TC0+6+0*3+15*TZ,x

	lda TC1+6+1*3+16*TZ,x
	sta TC0+6+0*3+16*TZ,x
	sta TC0+6+0*3+17*TZ,x
	sta TC0+6+0*3+18*TZ,x
	sta TC0+6+0*3+19*TZ,x

	lda TC1+6+1*3+20*TZ,x
	sta TC0+6+0*3+20*TZ,x
	sta TC0+6+0*3+21*TZ,x
	sta TC0+6+0*3+22*TZ,x
	sta TC0+6+0*3+23*TZ,x

	lda TC1+6+1*3+24*TZ,x
	sta TC0+6+0*3+24*TZ,x
	sta TC0+6+0*3+25*TZ,x
	sta TC0+6+0*3+26*TZ,x
	sta TC0+6+0*3+27*TZ,x

	lda TC1+6+1*3+28*TZ,x
	sta TC0+6+0*3+28*TZ,x
	sta TC0+6+0*3+29*TZ,x
	sta TC0+6+0*3+30*TZ,x
	sta TC0+6+0*3+31*TZ,x

	inx
	inx
	inx
ts0end:	cpx #CCW*3
	bne ts0
	rts

ts1:	lda TC0+6+1*3+0*TZ,x		; 8*(4+4*5) + 11 = 203 cycles/loop
	sta TC1+6+0*3+0*TZ,x		; -> 2842 cycles total = ~40 lines/3 frames
	sta TC1+6+0*3+1*TZ,x		; -> ~13 lines/frame (3/4 of frames)
	sta TC1+6+0*3+2*TZ,x
	sta TC1+6+0*3+3*TZ,x

	lda TC0+6+1*3+4*TZ,x
	sta TC1+6+0*3+4*TZ,x
	sta TC1+6+0*3+5*TZ,x
	sta TC1+6+0*3+6*TZ,x
	sta TC1+6+0*3+7*TZ,x

	lda TC0+6+1*3+8*TZ,x
	sta TC1+6+0*3+8*TZ,x
	sta TC1+6+0*3+9*TZ,x
	sta TC1+6+0*3+10*TZ,x
	sta TC1+6+0*3+11*TZ,x

	lda TC0+6+1*3+12*TZ,x
	sta TC1+6+0*3+12*TZ,x
	sta TC1+6+0*3+13*TZ,x
	sta TC1+6+0*3+14*TZ,x
	sta TC1+6+0*3+15*TZ,x

	lda TC0+6+1*3+16*TZ,x
	sta TC1+6+0*3+16*TZ,x
	sta TC1+6+0*3+17*TZ,x
	sta TC1+6+0*3+18*TZ,x
	sta TC1+6+0*3+19*TZ,x

	lda TC0+6+1*3+20*TZ,x
	sta TC1+6+0*3+20*TZ,x
	sta TC1+6+0*3+21*TZ,x
	sta TC1+6+0*3+22*TZ,x
	sta TC1+6+0*3+23*TZ,x

	lda TC0+6+1*3+24*TZ,x
	sta TC1+6+0*3+24*TZ,x
	sta TC1+6+0*3+25*TZ,x
	sta TC1+6+0*3+26*TZ,x
	sta TC1+6+0*3+27*TZ,x

	lda TC0+6+1*3+28*TZ,x
	sta TC1+6+0*3+28*TZ,x
	sta TC1+6+0*3+29*TZ,x
	sta TC1+6+0*3+30*TZ,x
	sta TC1+6+0*3+31*TZ,x

	inx
	inx
	inx
ts1end:	cpx #CCW*3
	bne ts1
	rts


TCODE dc.b $A9,$24,$EA,$E6,	$E6,$EA,$24,$A9
; lda #ea, bit $ea, nop;nop; inc $ea


INITSCROLL
	LDA #<TEKSTI
	STA CHARP+1
	LDA #>TEKSTI
	STA CHARP+2
	RTS

	; plot new	10 lines	20
	; scroll matrix	17 lines	22
	; scroll matrix	17 lines	22
	; scroll code	40 lines	20

SCROLL	LDX #1		; ~0/20/20/17/16 lines
	BEQ 0$		; Stopped?
	DEX
	STX SCROLL+1
	RTS
0$	LDA $9111	; Stopped by button?
	AND #$20
	BNE SCROLL3
	RTS

SCROLL3	LDX #3
	DEX
	;BMI SCOV	; need to move by 4 cycles/2 chars
	bpl 0$
	jmp SCOV
0$	STX SCROLL3+1	; otherwise just 'soft'-scroll

	txa
#if SYSTEM & PAL
	clc
	adc #XOFF
#else
	and #1
#endif
	sta xpos+1
	LDA TCODE,X	; update timing code
	STA T0
	STA T1
	LDA TCODE+4,X
	STA TTIM

	CPX #2
	BNE huu2

	; *** 2 ***
#if SYSTEM & PAL
	lda #3*7
#else
	lda #3*7	; 0..6 (7)	1421 cycles = 20 PAL-lines
#endif
	sta ts1end+1
	sta ts0end+1
	ldx #0*14	; 0..6 (7)	1421 cycles = ~20 lines

	LDA WHICH+1
	BNE SECS
	JMP ts0
SECS	JMP ts1

huu2	CPX #1
	BNE huu1

	; *** 1 ***
#if SYSTEM & NTSC
	lda vmtrx+1
	eor #$10	; switch $1000/$1400
	sta vmtrx+1
	and #$10	; 0/1 : $1000/$1400 visible currently
	beq 0$
	jsr cp1000	; ~17 PAL-lines
	jmp 1$
0$	jsr cp1400
1$
	lda #3*8
	sta ts1end+1
	sta ts0end+1
	ldx #3*7	; 7..7 (1)	203 cycles = 3 PAL-lines
#else
	lda #3*14
	sta ts1end+1
	sta ts0end+1
	ldx #3*7	; 7..13 (7)	1421 cycles = ~20 lines
#endif

	LDA WHICH+1
	BNE SECS2
	JMP ts0
SECS2	JMP ts1

huu1	; *** 0 ***
#if SYSTEM & NTSC
	lda #3*9
	sta ts1end+1
	sta ts0end+1
	ldx #3*8	; 8..8 (1)	203 cycles = 3 PAL-lines

	lda WHICH+1
	bne 90$
	jsr ts0
	jmp 91$
90$	jsr ts1
91$
#endif
	lda vmtrx+1
	and #$10	; 0/1 : $1000/$1400 visible currently
	beq 0$
	jmp cp1400	; ~17 lines
0$	jmp cp1000


SCOV	; *** -1 ***	; ~10 + 6 lines = ~16 lines
#if SYSTEM & PAL
#if CCW > 14
	lda #3*CCW
	sta ts1end+1
	sta ts0end+1
	ldx #3*14	; 14..CCW (1/2)	203/406 cycles = ~3/6 lines
	LDA WHICH+1
	BNE SECS3
	JSR ts0
	jmp secs3end
SECS3	JSR ts1
secs3end
#endif
#else	; NTSC
	lda #3*CCW
	sta ts1end+1
	sta ts0end+1
	ldx #3*9	; 9..12 (4)	812 cycles = 11 PAL-lines

	lda WHICH+1
	bne 0$
	jsr ts0
	jmp 1$
0$	jsr ts1
1$
#endif

	LDX #>T0
WHICH	LDA #1
	EOR #1
	STA WHICH+1
	BNE SECS4
	LDX #>T1
SECS4	STX TCALL+2

	lda #XOFF+3
#if SYSTEM & PAL
#else
	and #1
#endif
	sta xpos+1

	LDX #3
	STX SCROLL3+1

	LDA TCODE,X	; timing code
	STA T0
	STA T1
	LDA TCODE+4,X	; opposite timing code
	STA TTIM

CCNT	LDX #0
CHAR	LDY #0
	TXA
	CMP MERKIT+192,Y
	BNE NEWCHAR
	lda #0
	sta ekarivi+1

CHARP	lda TEKSTI
	BPL CHAROK
	LSR
	BCS WRAP
	STA SCROLL+1
	LDY #32
	BNE CHAROK
WRAP	JSR INITSCROLL
	lda KEYWAIT+1
	bne 0$		; not loaded yet
	lda AUTO
	beq 0$		; not automatic
	lda #1
	sta KEYWAIT+1	; exit
0$	lda #32
CHAROK	and #$3f	; fix for ASCII characters
	sta CHAR+1
	tay
	LDX MERKIT+191,Y
	STX CCNT+1
	INC CHARP+1
	BNE NOINC
	INC CHARP+2
NOINC	CPY #32
	BEQ NEWCHAR
	CPY #0
	BEQ NEWCHAR
	LDA NEWCHAR+1
	EOR #1
	STA NEWCHAR+1
NEWCHAR LDA #$8D	; STA/STY
	STA $EA		; ZP
	LDA MERKIT,X
	sta uusimerkki+1
;147 = ~2 lines

	LDX $EA		; ZP
	LSR
	BCS BIT0	; 4/3 cycles (more even than 5/3 cycles)
	LDX #$8E	; STX
BIT0	STX TC0+6+CCW*3+0*TZ
	STX TC0+6+CCW*3+1*TZ
	STX TC0+6+CCW*3+2*TZ
	STX TC0+6+CCW*3+3*TZ
	STX TC1+6+CCW*3+0*TZ	; only plotting to the 'proper' half would
	STX TC1+6+CCW*3+1*TZ	; only gain 128 cycles = 1.8 lines tops..
	STX TC1+6+CCW*3+2*TZ
	STX TC1+6+CCW*3+3*TZ
	LDX $EA		; ZP
	LSR
	BCS BIT1
	LDX #$8E	; STX
BIT1	STX TC0+6+CCW*3+4*TZ
	STX TC0+6+CCW*3+5*TZ
	STX TC0+6+CCW*3+6*TZ
	STX TC0+6+CCW*3+7*TZ
	STX TC1+6+CCW*3+4*TZ
	STX TC1+6+CCW*3+5*TZ
	STX TC1+6+CCW*3+6*TZ
	STX TC1+6+CCW*3+7*TZ
	LDX $EA		; ZP
	LSR
	BCS BIT2
	LDX #$8E	; STX
BIT2	STX TC0+6+CCW*3+8*TZ
	STX TC0+6+CCW*3+9*TZ
	STX TC0+6+CCW*3+10*TZ
	STX TC0+6+CCW*3+11*TZ
	STX TC1+6+CCW*3+8*TZ
	STX TC1+6+CCW*3+9*TZ
	STX TC1+6+CCW*3+10*TZ
	STX TC1+6+CCW*3+11*TZ
	LDX $EA		; ZP
	LSR
	BCS BIT3
	LDX #$8E	; STX
BIT3	STX TC0+6+CCW*3+12*TZ
	STX TC0+6+CCW*3+13*TZ
	STX TC0+6+CCW*3+14*TZ
	STX TC0+6+CCW*3+15*TZ
	STX TC1+6+CCW*3+12*TZ
	STX TC1+6+CCW*3+13*TZ
	STX TC1+6+CCW*3+14*TZ
	STX TC1+6+CCW*3+15*TZ
	LDX $EA		; ZP
	LSR
	BCS BIT4
	LDX #$8E	; STX
BIT4	STX TC0+6+CCW*3+16*TZ
	STX TC0+6+CCW*3+17*TZ
	STX TC0+6+CCW*3+18*TZ
	STX TC0+6+CCW*3+19*TZ
	STX TC1+6+CCW*3+16*TZ
	STX TC1+6+CCW*3+17*TZ
	STX TC1+6+CCW*3+18*TZ
	STX TC1+6+CCW*3+19*TZ
	LDX $EA		; ZP
	LSR
	BCS BIT5
	LDX #$8E	; STX
BIT5	STX TC0+6+CCW*3+20*TZ
	STX TC0+6+CCW*3+21*TZ
	STX TC0+6+CCW*3+22*TZ
	STX TC0+6+CCW*3+23*TZ
	STX TC1+6+CCW*3+20*TZ
	STX TC1+6+CCW*3+21*TZ
	STX TC1+6+CCW*3+22*TZ
	STX TC1+6+CCW*3+23*TZ
	LDX $EA		; ZP
	LSR
	BCS BIT6
	LDX #$8E	; STX
BIT6	STX TC0+6+CCW*3+24*TZ
	STX TC0+6+CCW*3+25*TZ
	STX TC0+6+CCW*3+26*TZ
	STX TC0+6+CCW*3+27*TZ
	STX TC1+6+CCW*3+24*TZ
	STX TC1+6+CCW*3+25*TZ
	STX TC1+6+CCW*3+26*TZ
	STX TC1+6+CCW*3+27*TZ
	LDX $EA		; ZP
	LSR
	BCS BIT7
	LDX #$8E	; STX
BIT7	STX TC0+6+CCW*3+28*TZ
	STX TC0+6+CCW*3+29*TZ
	STX TC0+6+CCW*3+30*TZ
	STX TC0+6+CCW*3+31*TZ
	STX TC1+6+CCW*3+28*TZ
	STX TC1+6+CCW*3+29*TZ
	STX TC1+6+CCW*3+30*TZ
	STX TC1+6+CCW*3+31*TZ
	INC CCNT+1
;8*41 = 328 = ~4.6 lines
ekarivi:
	ldx #0
	bne uusimerkki
	lda uusimerkki+1	; Make sure there is a line between chars
	ora vanhamerkki+1
	jmp continue

uusimerkki:
	lda #0
vanhamerkki:
	eor #0
continue:
	inc ekarivi+1
	tax		; save original value
	and #3
	ora #60		;240/4
	sta $1000+1*SCW-2	; Using ZP for temporaries would gain nothing

	txa
	lsr
	lsr
	tax
	and #3
	ora #60		;240/4
	sta $1000+2*SCW-2

	txa
	lsr
	lsr
	tax
	and #3
	ora #60		;240/4
	sta $1000+3*SCW-2

	txa
	lsr
	lsr
	;tax		; no need for the value anymore
	;and #3		; already shifted all other bits away
	ora #60		;240/4
	sta $1000+4*SCW-2

	lda uusimerkki+1
	sta vanhamerkki+1
	lsr
	;rol $1000+1*SCW-2
	asl $1000+1*SCW-2	; the top line does not really need it..
	eor uusimerkki+1	; 'edge detection'
	lsr
	rol $1000+1*SCW-2

	lsr
	rol $1000+2*SCW-2
	lsr
	rol $1000+2*SCW-2

	lsr
	rol $1000+3*SCW-2
	lsr
	rol $1000+3*SCW-2

	lsr
	rol $1000+4*SCW-2
	lsr
	rol $1000+4*SCW-2

	; the other half - horizontal lines only
	lda $1000+1*SCW-2	; get the right value
	sta $1400+1*SCW-2	; copy to the other buffer too (only 32 extra cycles)
	and #$f3		; mask off the vertical lines
	sta $1000+1*SCW-1	; store the horizontal lines..
	sta $1400+1*SCW-1	; store the horizontal lines..
	lda $1000+2*SCW-2
	sta $1400+2*SCW-2
	and #$f3
	sta $1000+2*SCW-1
	sta $1400+2*SCW-1
	lda $1000+3*SCW-2
	sta $1400+3*SCW-2
	and #$f3
	sta $1000+3*SCW-1
	sta $1400+3*SCW-1
	lda $1000+4*SCW-2
	sta $1400+4*SCW-2
	and #$f3
	sta $1000+4*SCW-1
	sta $1400+4*SCW-1

	lda vmtrx+1
	eor #$10		; switch $1000/$1400
	sta vmtrx+1
	rts
;259 = ~3.8 lines

#if SYSTEM & PAL
cp1400	ldx #SCW-2-1
0$:	lda $1402+0*SCW,x	; Scroll the 'contour' characters
	sta $1000+0*SCW,x
	lda $1402+1*SCW,x
	sta $1000+1*SCW,x
	lda $1402+2*SCW,x
	sta $1000+2*SCW,x
	lda $1402+3*SCW,x
	sta $1000+3*SCW,x
	dex			; Can copy backwards (double buffered)
	bpl 0$			; 1189 cycles = 17 lines
	rts

cp1000	ldx #SCW-2-1
0$:	lda $1002+0*SCW,x	; Scroll the 'contour' characters
	sta $1400+0*SCW,x
	lda $1002+1*SCW,x
	sta $1400+1*SCW,x
	lda $1002+2*SCW,x
	sta $1400+2*SCW,x
	lda $1002+3*SCW,x
	sta $1400+3*SCW,x
	dex			; Can copy backwards (double buffered)
	bpl 0$
	rts
#else
cp1400	ldx #SCW-2
0$:	lda $1401+0*SCW,x	; Scroll the 'contour' characters
	sta $1000+0*SCW,x
	lda $1401+1*SCW,x
	sta $1000+1*SCW,x
	lda $1401+2*SCW,x
	sta $1000+2*SCW,x
	lda $1401+3*SCW,x
	sta $1000+3*SCW,x
	dex			; Can copy backwards (double buffered)
	bpl 0$			; 1189 cycles = 17 lines
	rts

cp1000	ldx #SCW-2
0$:	lda $1001+0*SCW,x	; Scroll the 'contour' characters
	sta $1400+0*SCW,x
	lda $1001+1*SCW,x
	sta $1400+1*SCW,x
	lda $1001+2*SCW,x
	sta $1400+2*SCW,x
	lda $1001+3*SCW,x
	sta $1400+3*SCW,x
	dex			; Can copy backwards (double buffered)
	bpl 0$
	rts
#endif


text2:	; $01-$7f	characters
	; $00		reset..
	; $80-$ff	effects
	;		$ff fadeout1	$fe fadein1
	;		$fd fadeout2	$fc fadein2
	;		$fb fadeout3	$fa fadein3
	;		$80 wait ~10 sec
; Note: ";<=>@" not available in the font
#if SYSTEM & PAL
	dc.b $fe, $80, $80, $ff
	dc.b "-- COPPER4 --"
	dc.b " BY ALBERT OF"
	dc.b " PU-239 2000 "
	dc.b "             "
	dc.b " A COPPER AND"
	dc.b " SPRITE DEMO.", $fa, $80, $80, $fb
	dc.b "A COPPER ROU-"
	dc.b "TINE WITH A  "
	dc.b "VIDEO OVERLAY"
	dc.b "IS EASY TO DO"
	dc.b "WITH VIC20 AS"
	dc.b "YOU CAN SEE..", $fc, $80, $80, $fd
	dc.b "THIS PART WAS"
	dc.b "PARTLY ADAP- "
	dc.b "TED FROM THE "
	dc.b "COPPER 3 PART"
	dc.b " OF THE C64  "
	dc.b "DEMO -ROOTS-.", 0
#else
	dc.b $fe, $80, $80, $ff
	dc.b "--COPPER 4--"
	dc.b "BY ALBERT OF"
	dc.b " PU-239 2000"
	dc.b "A COPPER AND"
	dc.b " SPRITE DEMO", $fa, $80, $80, $fb
	dc.b " A COPPER   "
	dc.b "ROUTINE WITH"
	dc.b "VIDEO MATRIX"
	dc.b "IS EASY WITH"
	dc.b "VIC20, SEE..", $fc, $80, $80, $fd
	dc.b " COPPER 4 IS"
	dc.b "PARTLY ADAP-"
	dc.b "TED FROM THE"
	dc.b " C64 VERSION"
	dc.b " OF COPPER3.", 0
#endif
screeninit:
	lda #<text2
	sta ssptr+1
	lda #>text2
	sta ssptr+2
	lda #0
	sta screenscroll+1
	sta screen+1
	rts

screenscroll:	; get new characters..
	ldy #0	; character counter (target)
ssptr	lda text2
	inc ssptr+1
	bne 0$
	inc ssptr+2
0$	cmp #0
	beq screeninit		; 0 = End of message
	bmi screeneffect	; negative = effect (fade in/out)
	and #63			; fix for ascii characters
	sta $1000+screenstart,y
	ora #64
	sta $1001+screenstart,y
	iny
	iny
	cpy #UHT*UWD
	bcc 1$
	ldy #0
1$	sty screenscroll+1
	rts

screeneffect:
	sta screen+1
	lda #0
	sta sefcnt+1
	rts

screen:	lda #0
	beq screenscroll
sefcnt:	ldy #0
	cmp #$ff
	beq seffadeout1
	cmp #$fe
	beq seffadein1
	cmp #$fd
	beq seffadeout2
	cmp #$fc
	beq seffadein2
	cmp #$fb
	beq seffadeout3
	cmp #$fa
	beq seffadein3

	; **fall through**	wait
sefend:	iny
	sty sefcnt+1
	bne 0$
	sty screen+1		; turn the effect off
0$:	rts


seffadeout1:
	tya
	lsr
	and #15		; just a precaution
	tax
	lda #0
	beq seffade1

seffadein1:
	tya
	lsr
	and #15		; just a precaution
	sta 2$+1
	lda #15
	sec
2$:	sbc #0
	tax
	lda #UWD
	; **Fall Through**
seffade1:
	cpx #0
	bne 0$
	ldx #16		; Shadow position
0$	sta columns,x
	cpy #31
	bne 1$
	lda #0
	sta screen+1
1$	jmp sefend



seffadeout2:
	sty 2$+1
	lda #UWD
	sec
2$:	sbc #0
	bcs seffade2

seffadein2:
	tya
seffade2:
	ldx #15
0$:	sta columns,x
	dex
	bne 0$
	sta columns+16	; Shadow position
	cpy #UWD
	bne 1$
	lda #0
	sta screen+1
1$:	jmp sefend


seffadeout3:
	tya
	cmp #$10	; sets carry if A>=$10, otherwise clears it
	and #$0e
	adc #0		; add carry
	tax
	lda #0
	beq seffade1

seffadein3:
	tya
	cmp #$10	; sets carry if A>=$10, otherwise clears it
	and #$0e
	adc #0		; add carry
	sta 2$+1
	lda #15
	sec
2$:	sbc #0
	tax
	lda #UWD
	bne seffade1


newcolors:		; 375 cycles = ~5.3 lines (constant time)
newcol1:
	lda #0
	dec newcol1+1
	and #15
	tay

	lda COL5+1,y	; COL1 masked
	ora #$28
	sta COLORS1+1
	lda COL5+2,y
	ora #$28
	sta COLORS1+2
	lda COL5+3,y
	ora #$48
	sta COLORS1+3
	lda COL5+4,y
	ora #$48
	sta COLORS1+4
	lda COL5+5,y
	ora #$88
	sta COLORS1+5
	lda COL5+6,y
	ora #$98
	sta COLORS1+6
	lda COL5+7,y
	ora #$78
	sta COLORS1+7
	lda COL5+8,y
	ora #$18
	sta COLORS1+8
	lda COL5+9,y
	ora #$18
	sta COLORS1+9
	lda COL5+10,y
	ora #$78
	sta COLORS1+10
	lda COL5+11,y
	ora #$98
	sta COLORS1+11
	lda COL5+12,y
	ora #$88
	sta COLORS1+12
	lda COL5+13,y
	ora #$48
	sta COLORS1+13
	lda COL5+14,y
	ora #$28
	sta COLORS1+14
	lda COL5+15,y
	ora #$28
	sta COLORS1+15
	; 15*10 = 150

	; If there is text, skip this part..
	ldx columns+16
	cpx #6
	bcs 2$		;2/3

	lda COL5,y	;4
	asl		;2
	asl		;2
	asl		;2
	asl		;2
	ora COL5,y	;4
	and #$7f	;2
	sta COLORS1	;4
	jmp newcol2	;3
			;=27
2$	lda COL5+0,y	; 4	; COL1 masked
	ora #$08	; 2
	sta COLORS1+0	; 4
			;=13	27-13=14 -> 7 nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

newcol2:
	lda #0
	inc newcol2+1
	and #15
	tay

	lda COL6+1,y	; COL1 masked
	ora #$28
	sta COLORS2+1
	lda COL6+2,y
	ora #$28
	sta COLORS2+2
	lda COL6+3,y
	ora #$48
	sta COLORS2+3
	lda COL6+4,y
	ora #$48
	sta COLORS2+4
	lda COL6+5,y
	ora #$88
	sta COLORS2+5
	lda COL6+6,y
	ora #$98
	sta COLORS2+6
	lda COL6+7,y
	ora #$78
	sta COLORS2+7
	lda COL6+8,y
	ora #$18
	sta COLORS2+8
	lda COL6+9,y
	ora #$18
	sta COLORS2+9
	lda COL6+10,y
	ora #$78
	sta COLORS2+10
	lda COL6+11,y
	ora #$98
	sta COLORS2+11
	lda COL6+12,y
	ora #$88
	sta COLORS2+12
	lda COL6+13,y
	ora #$48
	sta COLORS2+13
	lda COL6+14,y
	ora #$28
	sta COLORS2+14
	lda COL6+15,y
	ora #$28
	sta COLORS2+15
	; 15*10 = 150

	; If there is text, skip this part..
	ldx columns+16	;4
	cpx #21		;2
	bcs 2$		;2/3

	lda COL6,y	;4
	asl		;2
	asl		;2
	asl		;2
	asl		;2
	ora COL6,y	;4
	and #$7f	;2
	sta COLORS2	;4
	rts
			;=24 + 12
2$	lda COL6,y	; 4	; COL1 masked
	ora #$08	; 2
	sta COLORS2	; 4
			;=13 + 12	24-13=11
	nop
	nop
	nop
	nop
	bit $ea
	rts

bobclear:
	ldx #0
	txa
bcll:	sta target+0,x
	sta target+32,x
	sta target+64,x
	sta target+96,x
	sta target+128,x
	sta target+160,x
	sta target+192,x
	sta target+224,x
	sta target+256,x
	sta target+288,x
	sta target+320,x
	sta target+352,x
	sta target+384,x
	sta target+416,x
	sta target+448,x
	sta target+480,x
	inx
	cpx #32
	bne bcll	; 87 cycles to clear one line -> does not reach the display
	rts
	; 2800 cycles = ~39.4 lines

bobadd:	dc.b 0, 20, 40, 60, 80, 100	;0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176
boboff:	dc.b 0, 128, 0, 128, 0, 128	;0, 64, 128, 192, 0, 64, 128, 192, 0, 64, 128, 192
m1tab:	dc.b $ff,$7f,$3f,$1f,$0f,$07,$03,$01
imtab:	dc.b <bobimage+0,<bobimage+16,<bobimage+32,<bobimage+48
	dc.b <bobimage+64,<bobimage+80,<bobimage+96,<bobimage+112

flash:	dc.b $20,$20,$80,$80,$90,$90,$10,$10,$10,$10,$90,$90,$80,$80,$20,$20


start:
	jsr scratchinit
	jsr bobclear
	cli

	lda #255
	sta KEYWAIT+1

	lda loader
1$	cmp #$8e	; stx
	bne 1$		; don't use loader...

	lda #<nextpart
	sta NEXTPART+0
	lda #>nextpart
	sta NEXTPART+1

	ldx #<nextFile
	ldy #>nextFile
	jsr loader

2$	bcs 2$

	lda #0
	sta KEYWAIT+1

KEYWAIT	lda #0
	beq KEYWAIT

	lda #0
	sta $900f	; black border
	sta $9002	; 0 columns
	sta $9003	; 0 rows

	sei
	lda #<COMMONIRQ	; set the raster IRQ routine pointer
	sta $314
	lda #>COMMONIRQ
	sta $315
	cli
	jmp copy

nextFile:
#if SYSTEM &PAL
	dc.b "SHEKKI.P"
#else
	dc.b "SHEKKI.N"
#endif

irqend
	lda KEYWAIT+1	; next part loaded?
	bne 90$
	; Check keyboard	run/stop lshift x v n , / up/down
	lda $9121
	lsr
	bcs 90$
	; run/stop
	ldx #1
	stx KEYWAIT+1
90$
	lda loader
	cmp #$8e
	bne 100$
	jmp COMMONIRQ
100$
	;jmp $eb18	; return from IRQ
	pla
	tay
	pla
	tax
	pla
	rti
	;jmp $eabf	; return to normal IRQ



nextpart = $4200


	;org bobimage-1
	;dc.b 0		; dummy code

	end


